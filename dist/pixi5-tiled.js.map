{"version":3,"file":"pixi5-tiled.js","sources":["../src/TiledContainer.ts","../src/Config.ts","../src/Utils.ts","../src/TiledPrimitives.ts","../src/TiledAnimator.ts","../src/TiledSprite.ts","../src/ContainerBuilder.ts","../src/SpriteBuilder.ts","../src/TextBuilder.ts","../src/TiledMultiSheet.ts","../src/TilesetManagers.ts","../src/TiledMapContainer.ts","../src/TiledObjectParser.ts","../src/pixi-utils/index.ts","../src/pixi-utils/ContainerExt.ts","../src/pixi-utils/DisplayExt.ts","../src/pixi-utils/EventEmitterExt.ts","../src/LayerBuilder.ts","../src/ObjectsLayerBuilder.ts","../src/TiledLayerBuilder.ts","../src/index.ts"],"sourcesContent":["import { Container, Text } from \"pixi.js\"\r\nimport { ITiledPtimitive } from './TiledPrimitives';\r\nimport { IParsedProps, ITiledLayer, ITiledObject, ITiledFrame, ITiledMap } from \"./ITiledMap\";\r\n\r\nexport class TiledContainer extends Container {\r\n\tlayerHeight: number = 0;\r\n\tlayerWidth: number = 0;\r\n\ttext?: Text;\r\n\tprimitive?: ITiledPtimitive;\r\n\ttiledId?: number;\r\n\tproperties?: IParsedProps;\r\n\tlayers?: {[key: string]: Container};\r\n\tsource?: ITiledLayer | ITiledObject | ITiledMap;\r\n\ttileFrame?: ITiledFrame;\r\n}\r\n","import { Point } from \"pixi.js\";\r\nimport { ILayerBuilder } from \"./LayerBuilder\";\r\n\r\nexport interface ITiledProps {\r\n\tdefSpriteAnchor: PIXI.Point;\r\n\tdebugContainers: boolean;\r\n\tusePixiDisplay: boolean;\r\n\troundFontAlpha: boolean;\r\n\tinjectMiddleware: boolean;\r\n\troundPixels: boolean;\r\n}\r\n\r\nexport const Config: ITiledProps = {\r\n\tdefSpriteAnchor: new Point(0, 1),\r\n\tdebugContainers: false,\r\n\tusePixiDisplay: false,\r\n\troundFontAlpha: false,\r\n\tinjectMiddleware: true,\r\n\troundPixels: true\r\n};\r\n\r\nexport const LayerBuildersMap: { [key: string]: ILayerBuilder | undefined } = {};\r\n","import { ITiledTileset, ITiledMap, IParsedProps, ITiledLayer, ITiledObject, ITiledSprite } from './ITiledMap';\r\n\r\nexport function HexStringToHexInt(value: string | number): number {\r\n\tif (!value) return 0;\r\n\r\n\tif (typeof value == 'number') return value;\r\n\r\n\tvalue = value.length > 7 ? value.substr(3, 6) : value.substr(1, 6);\r\n\r\n\ttry {\r\n\t\treturn parseInt(value, 16);\r\n\t} catch (e) {\r\n\t\tconsole.warn('Color parse error:', e.message);\r\n\t\treturn 0;\r\n\t}\r\n}\r\n\r\nexport function HexStringToAlpha(value: string | number): number {\r\n\tif (!value) return 1;\r\n\tif (typeof value == 'number') return value;\r\n\r\n\tif (value.length <= 7) return 1;\r\n\r\n\ttry {\r\n\t\treturn parseInt(value.substr(1, 2), 16) / 255.0;\r\n\t} catch (e) {\r\n\t\tconsole.warn('Alpha parse error:', e.message);\r\n\t\treturn 1;\r\n\t}\r\n}\r\n\r\nexport enum TiledObjectType {\r\n\tDEFAULT,\r\n\tPOINT,\r\n\tPOLYGON,\r\n\tPOLYLINE,\r\n\tELLIPSE,\r\n\tTEXT,\r\n\tIMAGE,\r\n}\r\n\r\n// https://doc.mapeditor.org/en/stable/reference/json-map-format/\r\n\r\nexport function Objectype(meta: any): TiledObjectType {\r\n\tif (meta.properties && meta.properties.container) return TiledObjectType.DEFAULT;\r\n\tif (meta.gid || meta.image) return TiledObjectType.IMAGE;\r\n\tif (meta.text != undefined) return TiledObjectType.TEXT;\r\n\tif (meta.point) return TiledObjectType.POINT;\r\n\tif (meta.polygon) return TiledObjectType.POLYGON;\r\n\tif (meta.polyline) return TiledObjectType.POLYLINE;\r\n\tif (meta.ellipse) return TiledObjectType.ELLIPSE;\r\n\r\n\treturn TiledObjectType.DEFAULT;\r\n}\r\n\r\nexport function resolveTile(tilesets: ITiledTileset[], gid: number) {\r\n\tlet tileSet = undefined; //_data.tilesets[0];\r\n\tlet tilesetId = 0;\r\n\r\n\tfor (let i = 0; i < tilesets.length; i++) {\r\n\t\tif (tilesets[i].firstgid <= gid) {\r\n\t\t\ttileSet = tilesets[i];\r\n\t\t\ttilesetId = i;\r\n\t\t}\r\n\t}\r\n\r\n\tif (!tileSet) {\r\n\t\tconsole.error('Image with gid:' + gid + ' not found!');\r\n\t\treturn null;\r\n\t}\r\n\r\n\tconst realGid = gid - tileSet.firstgid;\r\n\r\n\tlet find = tileSet.tiles!.filter(obj => obj.id == realGid)[0];\r\n\tlet img = Object.assign({}, find, { tilesetId });\r\n\r\n\tif (!img) {\r\n\t\tconsole.error('Load res MISSED gid:' + realGid);\r\n\t\treturn null;\r\n\t}\r\n\r\n\treturn img;\r\n}\r\n\r\nexport function _prepareProperties(layer: ITiledMap | ITiledLayer | ITiledObject) {\r\n\tlet props: IParsedProps = {};\r\n\r\n\tif (layer.properties) {\r\n\t\tif (layer.properties instanceof Array) {\r\n\t\t\tfor (var p of layer.properties) {\r\n\t\t\t\tlet val = p.value;\r\n\t\t\t\tif (p.type == 'color') {\r\n\t\t\t\t\tval = HexStringToHexInt(val as string);\r\n\t\t\t\t}\r\n\t\t\t\tprops[p.name] = val;\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\t// old tiled format\r\n\t\t\tprops = layer.properties;\r\n\t\t}\r\n\t}\r\n\r\n\tconst spriteObject = layer as ITiledSprite;\r\n\r\n\t// http://doc.mapeditor.org/en/stable/reference/tmx-map-format/#tile-flipping\r\n\tif (spriteObject.gid > 0) {\r\n\t\tconst gid = spriteObject.gid;\r\n\r\n\t\tconst vFlip = !!(gid & 0x40000000);\r\n\t\tconst hFlip = !!(gid & 0x80000000);\r\n\t\tconst dFlip = !!(gid & 0x20000000);\r\n\r\n\t\tprops['vFlip'] = vFlip;\r\n\t\tprops['hFlip'] = hFlip;\r\n\t\tprops['dFlip'] = dFlip;\r\n\r\n\t\tspriteObject.vFlip = vFlip;\r\n\t\tspriteObject.hFlip = hFlip;\r\n\r\n\t\tconst realGid = gid & ~(0x40000000 | 0x80000000 | 0x20000000);\r\n\t\tspriteObject.gid = realGid;\r\n\t}\r\n\r\n\tlayer.parsedProps = props;\r\n}\r\n","import { Rectangle, Point, Polygon, Ellipse } from \"pixi.js\";\r\nimport * as Utils from \"./Utils\";\r\nimport { ITiledObject } from \"./ITiledMap\";\r\n\r\nexport interface ITiledPtimitive {\r\n\tname: string;\r\n\ttypes: Array<string>;\r\n\tvisible: boolean;\r\n}\r\n\r\nexport class TiledRect extends Rectangle implements ITiledPtimitive {\r\n\tname: string = \"\";\r\n\ttypes: string[] = [];\r\n\tvisible: boolean = true;\r\n}\r\n\r\nexport class TiledPoint extends Point implements ITiledPtimitive {\r\n\tname: string = \"\";\r\n\ttypes: string[] = [];\r\n\tvisible: boolean = true;\r\n\r\n\tconstructor(x?: number, y?: number) {\r\n\t\tsuper(x, y);\r\n\t}\r\n}\r\n\r\nexport class TiledPolygon extends Polygon implements ITiledPtimitive {\r\n\tname: string = \"\";\r\n\ttypes: string[] = [];\r\n\tvisible: boolean = true;\r\n\r\n\tprivate _x: number = 0;\r\n\tprivate _y: number = 0;\r\n\r\n\tconstructor(points: Point[]) {\r\n\t\tsuper(points);\r\n\t}\r\n\r\n\tset x(sX: number) {\r\n\t\tconst delta = sX - this._x;\r\n\t\tthis._x = sX;\r\n\r\n\t\tfor (let xIndex = 0; xIndex < this.points.length; xIndex += 2) {\r\n\t\t\tthis.points[xIndex] += delta;\r\n\t\t}\r\n\t}\r\n\r\n\tset y(sY: number) {\r\n\t\tconst delta = sY - this._y;\r\n\t\tthis._y = sY;\r\n\r\n\t\tfor (let yIndex = 1; yIndex < this.points.length; yIndex += 2) {\r\n\t\t\tthis.points[yIndex] += delta;\r\n\t\t}\r\n\t}\r\n\r\n\tget x(): number {\r\n\t\treturn this._x;\r\n\t}\r\n\r\n\tget y(): number {\r\n\t\treturn this._y;\r\n\t}\r\n\r\n\tgetBounds(): Rectangle {\r\n\t\tlet rect = new Rectangle();\r\n\r\n\t\tlet maxX: number = this._x;\r\n\t\tlet maxY: number = this._y;\r\n\r\n\t\tfor (let index = 0; index < this.points.length; index += 2) {\r\n\t\t\tconst px = this.points[index];\r\n\t\t\tconst py = this.points[index + 1];\r\n\r\n\t\t\trect.x = px < rect.x ? px : rect.x;\r\n\t\t\trect.y = py < rect.y ? py : rect.y;\r\n\r\n\t\t\tmaxX = px > maxX ? px : maxX;\r\n\t\t\tmaxY = py > maxY ? py : maxY;\r\n\t\t}\r\n\r\n\t\trect.width = maxX - rect.x;\r\n\t\trect.height = maxY - rect.y;\r\n\r\n\t\treturn rect;\r\n\t}\r\n\r\n\tget width(): number {\r\n\t\treturn this.getBounds().width;\r\n\t}\r\n\r\n\tget height(): number {\r\n\t\treturn this.getBounds().height;\r\n\t}\r\n\r\n\tset height(h: number) {\r\n\t\tconst factor = h / this.height;\r\n\r\n\t\tfor (let yIndex = 1; yIndex < this.points.length; yIndex += 2) {\r\n\t\t\tconst delta = (this.points[yIndex] - this._y) * factor;\r\n\t\t\tthis.points[yIndex] = this._y + delta;\r\n\t\t}\r\n\t}\r\n\r\n\tset width(w: number) {\r\n\t\tconst factor = w / this.width;\r\n\r\n\t\tfor (let xIndex = 0; xIndex < this.points.length; xIndex += 2) {\r\n\t\t\tconst delta = (this.points[xIndex] - this._x) * factor;\r\n\t\t\tthis.points[xIndex] = this._x + delta;\r\n\t\t}\r\n\t}\r\n}\r\n\r\nexport class TiledPolypine implements ITiledPtimitive {\r\n\tname: string = \"\";\r\n\ttypes: string[] = [];\r\n\tvisible: boolean = true;\r\n\r\n\tpoints: Array<Point> = [];\r\n\r\n\tconstructor(points: Array<Point>) {\r\n\t\tthis.points = points.slice();\r\n\t}\r\n}\r\n\r\nexport class TiledEllipse extends Ellipse implements ITiledPtimitive {\r\n\tname: string = \"\";\r\n\ttypes: string[] = [];\r\n\tvisible: boolean = true;\r\n\r\n\tconstructor(x?: number, y?: number, hw?: number, hh?: number) {\r\n\t\tsuper(x, y, hw, hh);\r\n\t}\r\n}\r\n\r\nexport function BuildPrimitive( meta: ITiledObject ): ITiledPtimitive | undefined {\r\n\t\r\n\tif (!meta) {\r\n\t\treturn;\r\n\t}\r\n\r\n\tlet prim: ITiledPtimitive | undefined = undefined;\r\n\r\n\tconst type: Utils.TiledObjectType = Utils.Objectype(meta);\r\n\r\n\tmeta.x = meta.x || 0;\r\n\tmeta.y = meta.y || 0;\r\n\r\n\tswitch (type) {\r\n\t\tcase Utils.TiledObjectType.ELLIPSE: {\r\n\t\t\tprim = new TiledEllipse(\r\n\t\t\t\tmeta.x + 0.5 * meta.width,\r\n\t\t\t\tmeta.y + 0.5 * meta.height,\r\n\t\t\t\tmeta.width * 0.5,\r\n\t\t\t\tmeta.height * 0.5\r\n\t\t\t);\r\n\t\t\tbreak;\r\n\t\t}\r\n\t\tcase Utils.TiledObjectType.POLYGON: {\r\n\t\t\tconst points = meta.polygon!;\r\n\t\t\tconst poses = points.map(p => {\r\n\t\t\t\treturn new Point(p.x + meta.x, p.y + meta.y);\r\n\t\t\t});\r\n\t\t\t\r\n\t\t\tprim = new TiledPolygon(poses);\r\n\t\t\tbreak;\r\n\t\t}\r\n\t\tcase Utils.TiledObjectType.POLYLINE: {\r\n\t\t\tconst points = meta.polygon!;\r\n\t\t\tconst poses = points.map(p => {\r\n\t\t\t\treturn new Point(p.x + meta.x, p.y + meta.y);\r\n\t\t\t});\r\n\r\n\t\t\tprim = new TiledPolypine(poses);\r\n\t\t\tbreak;\r\n\t\t}\r\n\t\tdefault:\r\n\t\t\tprim = new TiledRect(meta.x, meta.y, meta.width, meta.height);\r\n\t}\r\n\r\n\tprim.types = meta.type ? meta.type.split(\":\") : [];\r\n\tprim.visible = meta.visible;\r\n\tprim.name = meta.name;\r\n\t\r\n\treturn prim;\r\n}\r\n","import { TiledSprite } from \"./TiledSprite\";\r\nimport { AnimatedSprite } from \"pixi.js\";\r\nimport { ITiledTile } from \"./ITiledMap\";\r\n\r\nexport class TileAnimator {\r\n\tprivate _animator: AnimatedSprite;\r\n\tprivate _childs: Set<TiledSprite> = new Set();\r\n\tprivate _tile: ITiledTile;\r\n\r\n\tconstructor(tile: ITiledTile) {\r\n\r\n\t\tif(!tile.animation) {\r\n\t\t\tthrow new Error(\"Tile has not animation!\");\r\n\t\t}\r\n\r\n\t\tthis._tile = tile;\r\n\t\tthis._animator = new AnimatedSprite(tile.animation);\r\n\t\tthis._animator.onFrameChange = this.__onFrame.bind(this);\r\n\t}\r\n\r\n\t__onFrame() {\r\n\t\tthis._childs.forEach((e)=> e.texture = this._animator.texture);\r\n\t}\r\n\r\n\tget anim() {\r\n\t\treturn this._animator;\r\n\t}\r\n\r\n\tadd(s: TiledSprite, strict = true) {\r\n\t\tif(!s) return;\r\n\r\n\t\t// prevent stack \r\n\t\tif(this._childs.has(s)) return;\r\n\t\t\r\n\t\ts.anim = this;\r\n\r\n\t\tif(s.tileFrame !== this._tile && strict) {\r\n\t\t\tthrow (`Invalid sprite! One Animator per tile type! Pased ${s.tileFrame!.id} should be ${this._tile.id}`);\r\n\t\t}\r\n\r\n\t\tthis._childs.add(s);\r\n\t}\r\n\r\n\tremove(s: TiledSprite) {\r\n\t\tthis._childs.delete(s);\r\n\t}\r\n}","import { Sprite } from \"pixi.js\";\r\nimport { ITiledTile } from \"./ITiledMap\";\r\nimport { TileAnimator } from \"./TiledAnimator\";\r\n\r\nexport class TiledSprite extends Sprite {\t\r\n\tpublic tileFrame?: ITiledTile;\r\n\tprivate _animator?: TileAnimator;\r\n\r\n\tconstructor(tile: ITiledTile, createAnimator = false) {\r\n\t\tsuper(tile.texture);\r\n\t\tthis.tileFrame = tile;\r\n\r\n\t\tif(createAnimator && this.tileFrame.animation) {\r\n\t\t\tthis.anim = new TileAnimator(this.tileFrame!);\r\n\t\t}\r\n\t}\r\n\r\n\tset anim(anim: TileAnimator | undefined) {\r\n\t\tif(anim === this._animator) return;\r\n\r\n\t\tif(this._animator) {\r\n\t\t\tthis._animator.remove(this);\r\n\t\t}\t\t\r\n\t\tthis._animator = anim;\r\n\r\n\t\tanim && anim.add(this);\r\n\t}\r\n\t\r\n\tget anim() {\r\n\t\treturn this._animator;\r\n\t}\r\n}","import { TiledContainer } from \"./TiledContainer\";\r\nimport { Config } from \"./Config\";\r\nimport {\r\n\tSprite,\r\n\tRectangle,\r\n\tTexture,\r\n\tGraphics,\r\n} from \"pixi.js\";\r\n\r\nimport * as Primitives from \"./TiledPrimitives\";\r\nimport { ITiledObject, ITiledLayer, ITiledTile } from \"./ITiledMap\";\r\nimport { TiledSprite } from \"./TiledSprite\";\r\n\r\nexport function ApplyMeta(meta: ITiledObject | ITiledLayer, target: TiledContainer) {\r\n\ttarget.name = meta.name;\r\n\ttarget.tiledId = meta.id;\r\n\ttarget.width = meta.width || target.width;\r\n\ttarget.height = meta.height || target.height;\r\n\ttarget.rotation = (((meta as ITiledObject).rotation || 0) * Math.PI) / 180.0;\r\n\r\n\ttarget.x = meta.x || 0;\r\n\ttarget.y = meta.y || 0;\r\n\r\n\ttarget.visible = meta.visible == undefined ? true : meta.visible;\r\n\ttarget.types = meta.type ? meta.type.split(\":\") : [];\r\n\r\n\ttarget.primitive = Primitives.BuildPrimitive(meta as ITiledObject);\r\n\r\n\tconst props = meta.parsedProps;\r\n\r\n\tif (props) {\r\n\t\tif (!isNaN(props.opacity as number)) {\r\n\t\t\ttarget.alpha = Number(props.opacity);\r\n\t\t}\r\n\r\n\t\t//@ts-ignore\r\n\t\tObject.assign(target, props);\r\n\r\n\t\ttarget.properties = props;\r\n\t}\r\n\r\n\ttarget.source = meta;\r\n\r\n\tif (Config.debugContainers) {\r\n\t\tsetTimeout(() => {\r\n\t\t\tconst rect = new Graphics();\r\n\r\n\t\t\trect.lineStyle(2, 0xff0000, 0.7)\r\n\t\t\t\t.drawRect(target.x, target.y, meta.width, meta.height)\r\n\t\t\t\t.endFill();\r\n\t\t\tif (target instanceof Sprite) {\r\n\t\t\t\trect.y -= target.height;\r\n\t\t\t}\r\n\t\t\ttarget.parent.addChild(rect);\r\n\t\t}, 30);\r\n\t}\r\n}\r\n\r\nexport function Build(meta: ITiledObject): TiledContainer | TiledSprite {\r\n\tconst types: Array<string> = meta.type ? meta.type.split(\":\") : [];\r\n\r\n\tlet container = undefined; // new TiledOG.TiledContainer();\r\n\r\n\tif (types.indexOf(\"mask\") > -1) {\r\n\t\tcontainer = new TiledSprite( { texture: Texture.WHITE, id: -1} as ITiledTile);\r\n\t} else {\r\n\t\tcontainer = new TiledContainer();\r\n\t}\r\n\r\n\tif (meta.gid) {\r\n\t\tif (container instanceof Sprite) {\r\n\t\t\tcontainer.anchor = Config.defSpriteAnchor as any;\r\n\t\t} else {\r\n\t\t\tcontainer.pivot = Config.defSpriteAnchor as any;\r\n\t\t\tcontainer.hitArea = new Rectangle(0, 0, meta.width, meta.height);\r\n\t\t}\r\n\t}\r\n\r\n\tApplyMeta(meta, container as TiledContainer);\r\n\r\n\treturn container;\r\n}\r\n","import { Config } from \"./Config\";\r\nimport { Sprite } from \"pixi.js\";\r\nimport * as ContainerBuilder from \"./ContainerBuilder\";\r\nimport * as Primitives from \"./TiledPrimitives\";\r\nimport { ITiledSprite, ITiledObjectLayer } from \"./ITiledMap\";\r\nimport { TiledSprite } from \"./TiledSprite\";\r\n\r\nexport function Build(meta: ITiledSprite): Sprite {\r\n\t// TODO make load from texture atlass\r\n\r\n\tconst sprite = new TiledSprite(meta.image!, true);\r\n\r\n\tif(sprite.anim) {\r\n\t\tconst a = sprite.anim.anim;\r\n\r\n\t\t(meta.parsedProps.animPlaying) && a.play();\r\n\t\ta.loop = meta.parsedProps.animLoop !== undefined ? !!meta.parsedProps.animLoop: true;\r\n\t}\r\n\r\n\t//TODO Set anchor and offsets to center (.5, .5)\r\n\tif (!meta.fromImageLayer) {\r\n\t\tsprite.anchor = Config.defSpriteAnchor!;\r\n\t}\r\n\r\n\t//debugger\r\n\tContainerBuilder.ApplyMeta(meta, sprite as any);\r\n\t\r\n\tconst obj = meta.image!.objectgroup as ITiledObjectLayer;\r\n\r\n\tif (obj) {\r\n\t\t(sprite as any).primitive = Primitives.BuildPrimitive(obj.objects[0]);\r\n\t}\r\n\r\n\tconst hFlip = meta.hFlip;\r\n\tconst vFlip = meta.vFlip;\r\n\r\n\tif (hFlip) {\r\n\t\tsprite.scale.x *= -1;\r\n\t\tsprite.anchor.x = 1;\r\n\t}\r\n\r\n\tif (vFlip) {\r\n\t\tsprite.scale.y *= -1;\r\n\t\tsprite.anchor.y = 0;\r\n\t}\r\n\r\n\treturn sprite;\r\n}\r\n","import { TiledContainer } from \"./TiledContainer\";\r\nimport { Text, DisplayObject, TextStyle } from \"pixi.js\";\r\nimport { Config } from \"./Config\";\r\nimport * as ContainerBuilder from \"./ContainerBuilder\";\r\nimport * as Utils from \"./Utils\";\r\nimport { ITiledObject } from \"./ITiledMap\";\r\n\r\nexport function Build(meta: ITiledObject): TiledContainer {\r\n\tconst container = new TiledContainer();\r\n\tconst text = meta.text!;\r\n\r\n\tlet pixiText = new Text(text.text, {\r\n\t\twordWrap: text.wrap,\r\n\t\twordWrapWidth: meta.width,\r\n\t\tfill: Utils.HexStringToHexInt(text.color || \"#000000\") || 0x000000,\r\n\t\talign: text.valign || \"top\",\r\n\t\tfontFamily: text.fontfamily || \"sans-serif\",\r\n\t\tfontWeight: text.bold ? \"bold\" : \"normal\",\r\n\t\tfontStyle: text.italic ? \"italic\" : \"normal\",\r\n\t\tfontSize: text.pixelsize || \"16px\"\r\n\t} as TextStyle);\r\n\r\n\tpixiText.name = meta.name + \"_Text\";\r\n\r\n\tpixiText.roundPixels = !!Config.roundFontAlpha;\r\n\r\n\tconst props = meta.parsedProps;\r\n\r\n\t// clear properties\r\n\tmeta.properties = [];\r\n\tmeta.parsedProps = {};\r\n\r\n\tContainerBuilder.ApplyMeta(meta, container);\r\n\tcontainer.pivot.set(0, 0);\r\n\r\n\tswitch (text.halign) {\r\n\t\tcase \"right\":\r\n\t\t\t{\r\n\t\t\t\tpixiText.anchor.x = 1;\r\n\t\t\t\tpixiText.position.x = meta.width;\r\n\t\t\t}\r\n\t\t\tbreak;\r\n\t\tcase \"center\":\r\n\t\t\t{\r\n\t\t\t\tpixiText.anchor.x = 0.5;\r\n\t\t\t\tpixiText.position.x = meta.width * 0.5;\r\n\t\t\t}\r\n\t\t\tbreak;\r\n\t\tdefault:\r\n\t\t\t{\r\n\t\t\t\tpixiText.anchor.x = 0;\r\n\t\t\t\tpixiText.position.x = 0;\r\n\t\t\t}\r\n\t\t\tbreak;\r\n\t}\r\n\r\n\tswitch (text.valign) {\r\n\t\tcase \"bottom\":\r\n\t\t\t{\r\n\t\t\t\tpixiText.anchor.y = 1;\r\n\t\t\t\tpixiText.position.y = meta.height;\r\n\t\t\t}\r\n\t\t\tbreak;\r\n\t\tcase \"center\":\r\n\t\t\t{\r\n\t\t\t\tpixiText.anchor.y = 0.5;\r\n\t\t\t\tpixiText.position.y = meta.height * 0.5;\r\n\t\t\t}\r\n\t\t\tbreak;\r\n\t\tdefault:\r\n\t\t\t{\r\n\t\t\t\tpixiText.anchor.y = 0;\r\n\t\t\t\tpixiText.position.y = 0;\r\n\t\t\t}\r\n\t\t\tbreak;\r\n\t}\r\n\r\n\tif (props) {\r\n\t\tpixiText.style.stroke =\r\n\t\t\tUtils.HexStringToHexInt(props.strokeColor as string) || 0;\r\n\t\tpixiText.style.strokeThickness = props.strokeThickness || 0;\r\n\t\tpixiText.style.padding = props.fontPadding || 0;\r\n\r\n\t\tObject.assign(pixiText, props);\r\n\t}\r\n\r\n\t//_cont.parentGroup = _layer.group;\r\n\tcontainer.addChild(pixiText);\r\n\tcontainer.text = pixiText;\r\n\r\n\tcontainer.properties = props;\r\n\r\n\treturn container;\r\n}","import { Spritesheet, Texture } from \"pixi.js\";\r\n\r\nexport class MultiSpritesheet {\r\n\tsheets: Array<Spritesheet | MultiSpritesheet> = [];\r\n\timages: { [name: string]: Texture } = {};\r\n\r\n\tconstructor(sheets?: Spritesheet[]) {\r\n\t\tif (sheets) {\r\n\t\t\tsheets.forEach(element => {\r\n\t\t\t\tthis.add(element);\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\tadd(sheet?: Spritesheet | MultiSpritesheet) {\r\n\t\tif (!sheet) throw \"Sheet can't be undefined\";\r\n\t\tif (sheet === this) throw \"U can't add self to spritesheet\";\r\n\r\n\t\tthis.sheets.push(sheet);\r\n\t}\r\n\r\n\taddTexture(tex: Texture, id: string) {\r\n\t\tthis.images[id] = tex;\r\n\t}\r\n\r\n\tget textures(): { [name: string]: Texture } {\r\n\t\tlet map: { [name: string]: Texture } = {};\r\n\r\n\t\tfor (const spr of this.sheets) {\r\n\t\t\tObject.assign(map, spr.textures);\r\n\t\t}\r\n\r\n\t\tObject.assign(map, this.images);\r\n\r\n\t\treturn map;\r\n\t}\r\n\r\n\tget animations(): { [name: string]: Texture[] } {\r\n\t\tlet map: { [name: string]: Texture[] } = {};\r\n\r\n\t\tfor (const spr of this.sheets) {\r\n\t\t\t// can be looped\r\n\t\t\tObject.assign(map, spr.animations);\r\n\t\t}\r\n\r\n\t\treturn map;\r\n\t}\r\n}\r\n","import { ITiledTileset, ITiledTile } from './ITiledMap';\r\nimport { MultiSpritesheet } from './TiledMultiSheet';\r\nimport { resolveTile } from './Utils';\r\n\r\nimport { Spritesheet, Texture, utils, ITextureDictionary, resources, BaseTexture, Rectangle } from 'pixi.js';\r\n\r\nclass FixedImageResource extends resources.ImageResource {\r\n\tload(): Promise<void> {\r\n\t\treturn new Promise((res, rej) => {\r\n\t\t\tconst rejector = {\r\n\t\t\t\tonError: rej,\r\n\t\t\t};\r\n\r\n\t\t\t// @ts-ignore\r\n\t\t\t(this.onError as any).add(rejector);\r\n\t\t\tsuper.load().then(res);\r\n\t\t});\r\n\t}\r\n}\r\n\r\nexport class TilesetManager extends utils.EventEmitter {\r\n\tprivate _sheet: MultiSpritesheet = new MultiSpritesheet();\r\n\tprivate _loadQueue: number = 0;\r\n\r\n\t/**\r\n\t * @description Base url for all images\r\n\t */\r\n\tpublic baseUrl: string = '';\r\n\r\n\t/**\r\n\t * @description Preload images which not exist in spritesheet\r\n\t */\r\n\tpublic loadUnknowImages: boolean = true;\r\n\r\n\tconstructor(private _tileSets: ITiledTileset[], sheet?: MultiSpritesheet | Spritesheet | ITextureDictionary) {\r\n\t\tsuper();\r\n\r\n\t\tif (sheet) {\r\n\t\t\tif (sheet!.textures) {\r\n\t\t\t\tthis.register(sheet as MultiSpritesheet);\r\n\t\t\t} else {\r\n\t\t\t\tObject.keys(sheet).forEach(e => {\r\n\t\t\t\t\tthis._sheet.addTexture((sheet as ITextureDictionary)[e], e);\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tregister(spritesheet: MultiSpritesheet | Spritesheet) {\r\n\t\tthis._sheet.add(spritesheet);\r\n\t}\r\n\r\n\tget spritesheet() {\r\n\t\treturn this._sheet;\r\n\t}\r\n\r\n\tgetTileByGid(gid: number, tryLoad = this.loadUnknowImages): ITiledTile | undefined {\r\n\t\tconst tile = resolveTile(this._tileSets, gid);\r\n\t\treturn this.getTileByTile(tile, tryLoad);\r\n\t}\r\n\r\n\tgetTileByTile(tile: ITiledTile | null, tryLoad = this.loadUnknowImages, skipAnim = false) {\r\n\t\tif (!tile) {\r\n\t\t\treturn undefined;\r\n\t\t}\r\n\t\tconst set = this._tileSets[tile.tilesetId!];\r\n\r\n\t\tif(!tile.image && set.image) {\r\n\t\t\ttile.fromSheet = true;\r\n\t\t\ttile.image = set.image;\r\n\t\t}\r\n\r\n\t\tif(!tile.image) {\r\n\t\t\treturn undefined;\r\n\t\t};\r\n\r\n\t\tif (tile.animation && !skipAnim) {\r\n\r\n\t\t\ttile.animation.forEach(e => {\r\n\t\t\t\tconst atile = set.tiles![e.tileid];\r\n\r\n\t\t\t\tatile.tilesetId = tile.tilesetId;\r\n\t\t\t\te.texture = this.getTileByTile(atile, tryLoad, true)!.texture;\r\n\t\t\t\te.time = e.duration;\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\tconst absUrl = this.baseUrl + tile.image!;\r\n\r\n\t\tlet texture = this.spritesheet.textures[tile.image];\r\n\r\n\t\ttile.lazyLoad = false;\r\n\r\n\t\tif (!texture && tryLoad) {\r\n\t\t\ttexture = this._tryLoadTexture(absUrl, tile);\r\n\r\n\t\t\ttile.lazyLoad = true;\r\n\r\n\t\t\tthis._sheet.addTexture(texture, tile.image);\r\n\t\t}\r\n\r\n\t\tif(texture && tile.fromSheet) {\r\n\t\t\ttexture = this._cropTile(set, tile, texture);\r\n\t\t}\r\n\r\n\t\ttile.texture = texture;\r\n\r\n\t\treturn tile;\r\n\t}\r\n\r\n\tgetTileSetByGid(gid: number): ITiledTileset | undefined {\r\n\t\tconst frame = resolveTile(this._tileSets, gid);\r\n\t\t\r\n\t\tif(!frame) {\r\n\t\t\treturn undefined;\r\n\t\t}\r\n\r\n\t\treturn this._tileSets[frame!.tilesetId];\r\n\t}\r\n\r\n\t_cropTile(set: ITiledTileset, tile: ITiledTile, texture: Texture) {\r\n\t\t\r\n\t\tconst colls = set.columns!;\r\n\t\tconst rows = set.tilecount! / colls;\r\n\t\tconst margin = set.margin! || 0;\r\n\t\tconst space = set.spacing! || 0;\r\n\t\tconst xId = tile.id % colls;\r\n\t\tconst yId = tile.id / colls | 0;\r\n\r\n\t\ttexture = new Texture(texture.baseTexture, new Rectangle(\r\n\t\t\tmargin + xId * (set.tilewidth! + space),\r\n\t\t\tmargin + yId * (set.tileheight! + space),\r\n\t\t\tset.tileheight, set.tilewidth\r\n\t\t));\r\n\r\n\t\tthis._sheet.addTexture(texture, `${tile.image}_${tile.tilesetId}:${tile.id}`);\r\n\r\n\t\treturn texture;\r\n\t}\r\n\r\n\t_tryLoadTexture(url: string, tile: ITiledTile) {\r\n\t\t// @ts-ignore\r\n\t\tconst res = new FixedImageResource(url, {\r\n\t\t\tautoLoad: false,\r\n\t\t\tcrossorigin: 'anonymous',\r\n\t\t});\r\n\r\n\t\tconst texture = new Texture(new BaseTexture(res));\r\n\t\tTexture.addToCache(texture, url);\r\n\r\n\t\tthis._loadQueue++;\r\n\r\n\t\tres.load()\r\n\t\t\t.then(() => {\r\n\t\t\t\ttexture.emit('loaded');\r\n\t\t\t})\r\n\t\t\t.catch((e: any)=>{\r\n\t\t\t\tconsole.warn(`Tile set image loading error!`,tile);\r\n\t\t\t})\r\n\t\t\t.finally(() => {\r\n\t\t\t\tthis._loadQueue--;\r\n\t\t\t\tif (this._loadQueue === 0) {\r\n\t\t\t\t\tthis.emit('loaded');\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\treturn texture;\r\n\t}\r\n\r\n\tget loaded() {\r\n\t\treturn this._loadQueue <= 0;\r\n\t}\r\n}\r\n","import { TiledContainer } from \"./TiledContainer\";\r\nimport { TilesetManager } from \"./TilesetManagers\";\r\n\r\nexport class TiledMapContainer extends TiledContainer {\r\n\tpublic tileSet?: TilesetManager;\r\n}","import { Spritesheet, LoaderResource, ITextureDictionary, Loader } from 'pixi.js';\r\nimport { TiledContainer } from './TiledContainer';\r\nimport { Config, LayerBuildersMap } from './Config';\r\n\r\nimport { MultiSpritesheet } from './TiledMultiSheet';\r\nimport { ITiledMap } from './ITiledMap';\r\nimport { TilesetManager } from './TilesetManagers';\r\nimport { TiledMapContainer } from './TiledMapContainer';\r\n\r\n//inject new field in resources\r\ndeclare module 'pixi.js' {\r\n\texport interface LoaderResource {\r\n\t\tstage?: TiledContainer;\r\n\t}\r\n}\r\n\r\ntype tValidSheet = Spritesheet | MultiSpritesheet | ITextureDictionary;\r\nlet showHello: boolean = true;\r\n\r\nexport function CreateStage(\r\n\tsheet: tValidSheet | undefined,\r\n\t_data: ITiledMap,\r\n\tbaseUrl: string = '',\r\n): TiledMapContainer | undefined {\r\n\t//validate\r\n\tif (!_data || _data.type != 'map') {\r\n\t\treturn undefined;\r\n\t}\r\n\r\n\tif (showHello) {\r\n\t\tconsole.log('[TILED] Importer!\\neXponenta {rondo.devil[a]gmail.com}');\r\n\t\tshowHello = false;\r\n\t}\r\n\r\n\tconst useDisplay: boolean = !!Config.usePixiDisplay && (PIXI as any).display !== undefined;\r\n\tconst stage = new TiledMapContainer();\r\n\r\n\tstage.layerHeight = _data.height;\r\n\tstage.layerWidth = _data.width;\r\n\tstage.source = _data;\r\n\r\n\tstage.tileSet = new TilesetManager(_data.tilesets, sheet);\r\n\tstage.tileSet.baseUrl = baseUrl;\r\n\r\n\tif (_data.layers) {\r\n\t\tlet zOrder = 0; //_data.layers.length;\r\n\r\n\t\tif (useDisplay) {\r\n\t\t\t_data.layers = _data.layers.reverse();\r\n\t\t}\r\n\r\n\t\tfor (let layer of _data.layers) {\r\n\t\t\tconst builder = LayerBuildersMap[layer.type];\r\n\r\n\t\t\tif (!builder) {\r\n\t\t\t\tconsole.warn(`[TILED] Importer can't support ${layer.type} layer type!`);\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\r\n\t\t\tconst pixiLayer = builder.Build(layer, stage.tileSet, zOrder, stage);\r\n\r\n\t\t\tif (!pixiLayer) {\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\r\n\t\t\tzOrder++;\r\n\t\t\tstage.layers = {\r\n\t\t\t\t[layer.name]: pixiLayer,\r\n\t\t\t};\r\n\r\n\t\t\tstage.addChild(pixiLayer);\r\n\t\t}\r\n\t}\r\n\r\n\treturn stage;\r\n}\r\n\r\nexport const Parser = {\r\n\tParse(res: LoaderResource, next: Function) {\r\n\t\tconst data = res.data;\r\n\t\tconst cropName = new RegExp(/^.*[\\\\\\/]/);\r\n\r\n\t\tlet baseUrl = res.url.replace((this as any).baseUrl, '');\r\n\t\tbaseUrl = baseUrl.match(cropName)![0];\r\n\r\n\t\tconst stage = CreateStage(res.textures!, data, baseUrl);\r\n\r\n\t\tif (!stage) {\r\n\t\t\tnext();\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tstage.name = res.url.replace(cropName, '').split('.')[0];\r\n\t\tres.stage = stage;\r\n\r\n\t\tif (stage.tileSet!.loaded) {\r\n\t\t\tnext();\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tstage.tileSet!.once('loaded', () => next());\r\n\t},\r\n\r\n\tuse(res: LoaderResource, next: Function) {\r\n\t\tParser.Parse.call(this, res, next);\r\n\t},\r\n\r\n\tadd() {\r\n\t\tconsole.log('[TILED] middleware registered!');\r\n\t},\r\n};\r\n","import container from \"./ContainerExt\";\r\nimport display from \"./DisplayExt\";\r\nimport emitter from \"./EventEmitterExt\";\r\n \r\nexport function InjectMixins(pixiPackage : any) {\r\n    container(pixiPackage);\r\n    display(pixiPackage);\r\n    emitter(pixiPackage);\r\n}\r\n","import * as PIXI from \"pixi.js\";\r\nimport { IParsedProps } from \"../ITiledMap\";\r\n\r\ndeclare module \"pixi.js\" {\r\n\texport interface Container {\r\n        getChildByPath<T extends PIXI.DisplayObject>(query: string): T | undefined;\r\n\t\taddGlobalChild(...child: PIXI.DisplayObject[]): PIXI.DisplayObject;\r\n\t\tproperties?: IParsedProps;\r\n\t}\r\n}\r\n\r\nexport default function(pack : {Container : any}) {\r\n\t\r\n\tif(!pack.Container)\r\n\t\tthrow new Error(\"Cant't find Container in package!\");\r\n\t\r\n\t/**\r\n\t * @mixes\r\n\t * MIXIN FROM pixiv5-tiled\r\n\t * Get child by path\r\n\t */\r\n\tPIXI.Container.prototype.getChildByPath = function<T extends PIXI.DisplayObject>(path: string) {\r\n\t\tif (!this.children || this.children.length == 0) return undefined;\r\n\r\n\t\tlet result: PIXI.DisplayObject | undefined = this;\r\n\r\n\t\tconst split = path.split(\"/\");\r\n\t\tconst isIndex = new RegExp(\"(?:{{0})-?d+(?=})\");\r\n\r\n\t\tfor (const p of split) {\r\n\t\t\t//@ts-ignore\r\n\t\t\tif (result == undefined || !(result.children)) {\r\n\t\t\t\tresult = undefined;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\r\n\t\t\tif (p.trim().length == 0) continue;\r\n\r\n\t\t\t// find by index\r\n\t\t\t//@ts-ignore\r\n\t\t\tconst ch = result.children;\r\n\t\t\tconst mathes = p.match(isIndex);\r\n\t\t\tif (mathes) {\r\n\t\t\t\tlet index = parseInt(mathes[0]);\r\n\t\t\t\tif (index < 0) {\r\n\t\t\t\t\tindex += ch.length;\r\n\t\t\t\t}\r\n\t\t\t\tif (index >= ch.length) {\r\n\t\t\t\t\tresult = undefined;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tresult = ch[index];\r\n\t\t\t\t}\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\r\n\t\t\t//default by name\r\n\t\t\tresult = (result as PIXI.Container).getChildByName(p);\r\n\t\t}\r\n\r\n\t\treturn result as T;\r\n\t}\r\n\t\r\n\tPIXI.Container.prototype.addGlobalChild = function(...child: PIXI.DisplayObject[]) {\r\n\t\t//TODO: better to convert global position to current matrix\r\n\t\tthis.transform.updateLocalTransform();\r\n\t\tconst loc = new PIXI.Matrix();\r\n\t\tconst invert = this.transform.localTransform.clone().invert();\r\n\t\tfor (let i = 0; i < child.length; i++) {\r\n\r\n\t\t\tconst newChild = child[i];\r\n\t\t\tnewChild.transform.updateLocalTransform();\r\n\t\t\tloc.copyFrom(invert);\r\n\t\t\tloc.append(newChild.localTransform);\r\n\t\t\tchild[i].transform.setFromMatrix(loc);\r\n\t\t}\r\n\r\n\t\treturn this.addChild(...child);\r\n\t}\r\n}\r\n","\r\n\r\ndeclare module \"pixi.js\" {\r\n\texport interface DisplayObject {\r\n\t\treplaceWithTransform(from:DisplayObject): void\r\n\t}\r\n}\r\n\r\nexport default function(pack : {DisplayObject : any}) {\r\n\r\n\tif(!pack.DisplayObject)\r\n\t\tthrow new Error(\"Cant't find DisplayObject in package!\");\r\n\t\r\n\tpack.DisplayObject.prototype.replaceWithTransform = function(from: any) {\r\n        from.updateTransform();\r\n\r\n        if(from.parent){\r\n\t\t\tfrom.parent.addChildAt(this, from.parent.getChildIndex(from));\r\n\t\t}\r\n\r\n\t\tthis.pivot.copyFrom(from.pivot);        \r\n        this.position.copyFrom(from.position);\r\n\t\tthis.scale.copyFrom(from.scale);\r\n\t\tthis.rotation = from.rotation;\r\n\r\n        this.updateTransform();\r\n    }\r\n}","declare module \"pixi.js\" {\r\n\tnamespace utils {\r\n\t\texport interface EventEmitter {\r\n\t\t\tonceAsync(event: string, context? : any): Promise<any>;\r\n\t\t}\r\n\t}\r\n}\r\n\r\nexport default function(pack : {utils : any}) {\r\n\tif(!pack.utils)\r\n\t\tthrow new Error(\"Cant't find utils in package!\");\r\n\r\n    pack.utils.EventEmitter.prototype.onceAsync = function(event: string, context? : any) : Promise<any> {\r\n        return new Promise((res)=>{\r\n            this.once(event, res, context);\r\n        })\r\n    }\r\n}","import { ITiledLayer } from './ITiledMap';\r\nimport { _prepareProperties } from './Utils';\r\nimport { Config } from './Config';\r\nimport { TiledContainer} from './TiledContainer';\r\nimport { TilesetManager } from './TilesetManagers';\r\n\r\nimport  * as ContainerBuilder  from \"./ContainerBuilder\";\r\nexport interface ILayerBuilder {\r\n\tBuild(meta: ITiledLayer, tileset: TilesetManager, ...args: any[]): TiledContainer | undefined;\r\n};\r\n\r\nexport const LayerBuilder = {\r\n\tBuild(layer: ITiledLayer, tileset: TilesetManager, zOrder = 0): TiledContainer | undefined {\r\n\r\n\t\tconst useDisplay: boolean = !!Config.usePixiDisplay && (PIXI as any).display !== undefined;\r\n\t\tconst Layer = useDisplay ? (PIXI as any).display.Layer : {};\r\n\t\tconst Group = useDisplay ? (PIXI as any).display.Group : {};\r\n\r\n\t\t_prepareProperties(layer);\r\n\r\n\t\tconst props = layer.parsedProps;\r\n\r\n\t\tif (props.ignore || props.ignoreLoad) {\r\n\t\t\tconsole.log('[TILED] layer ignored:' + layer.name);\r\n\t\t\treturn undefined;\r\n\t\t}\r\n\r\n\t\tconst layerObject: TiledContainer = useDisplay\r\n\t\t\t? new Layer(new Group(props.zOrder !== undefined ? props.zOrder : zOrder, true))\r\n\t\t\t: new TiledContainer();\r\n\r\n\t\tlayerObject.tiledId = layer.id;\r\n\t\tlayerObject.name = layer.name;\r\n\t\tlayerObject.visible = layer.visible;\r\n\r\n\t\tlayerObject.position.set(layer.x, layer.y);\r\n\t\tlayerObject.alpha = layer.opacity || 1;\r\n\r\n\t\tContainerBuilder.ApplyMeta(layer, layerObject);\r\n\t\treturn layerObject;\r\n\t},\r\n};\r\n","import { ITiledLayer, ITiledImageLayer, ITiledObjectLayer, ITiledSprite, ITiledObject } from './ITiledMap';\r\nimport { TiledContainer } from './TiledContainer';\r\nimport { LayerBuilder, ILayerBuilder } from './LayerBuilder';\r\nimport { TilesetManager } from './TilesetManagers';\r\nimport { _prepareProperties, Objectype, TiledObjectType } from './Utils';\r\n\r\nimport * as SB from './SpriteBuilder';\r\nimport * as TB from './TextBuilder';\r\nimport * as CB from './ContainerBuilder';\r\n\r\nimport { TiledSprite } from './TiledSprite';\r\n\r\nexport const ObjectLayerBuilder = {\r\n\t__gen: <Record<TiledObjectType, (...args: any[]) => TiledContainer | TiledContainer>>{\r\n\t\t[TiledObjectType.IMAGE](meta: ITiledObject, tileset: TilesetManager) {\r\n\t\t\tconst smeta = meta as ITiledSprite;\r\n\t\t\tconst frame = smeta.image ? tileset.getTileByTile(smeta.image!) : tileset.getTileByGid(smeta.gid);\r\n\r\n\t\t\tsmeta.image = frame;\r\n\r\n\t\t\tconst sprite = SB.Build(smeta) as TiledSprite;\r\n\r\n\t\t\tif (smeta.fromImageLayer && frame!.lazyLoad) {\r\n\t\t\t\tframe!.texture.once('loaded', () => {\r\n\t\t\t\t\tsprite.scale.set(1);\r\n\t\t\t\t});\r\n\t\t\t}\r\n\r\n\t\t\tif (smeta.fromImageLayer) {\r\n\t\t\t\tsprite.anchor.set(0);\r\n\t\t\t}\r\n\r\n\t\t\treturn (sprite as any) as TiledContainer;\r\n\t\t},\r\n\t\t[TiledObjectType.TEXT](meta: ITiledObject, tileset: TilesetManager) {\r\n\t\t\treturn TB.Build(meta);\r\n\t\t},\r\n\t\t[TiledObjectType.DEFAULT](meta: ITiledObject, tileset: TilesetManager) {\r\n\t\t\treturn CB.Build(meta);\r\n\t\t},\r\n\t},\r\n\r\n\tBuild(layer: ITiledLayer, tileset: TilesetManager, zOrder = 0): TiledContainer | undefined {\r\n\t\tconst objLayer = layer as ITiledObjectLayer;\r\n\t\tconst layerContatiner = LayerBuilder.Build(layer, tileset, zOrder);\r\n\r\n\t\tif (!layerContatiner) {\r\n\t\t\treturn undefined;\r\n\t\t}\r\n\r\n\t\tif (layer.type === 'imagelayer') {\r\n\t\t\tif (!this.__convertLayer(layer as ITiledImageLayer)) {\r\n\t\t\t\treturn undefined;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (!objLayer.objects || !objLayer.objects.length) {\r\n\t\t\treturn layerContatiner;\r\n\t\t}\r\n\r\n\t\tconst objects = objLayer.objects;\r\n\r\n\t\tlet localZIndex = 0;\r\n\r\n\t\tfor (let objMeta of objects) {\r\n\t\t\t_prepareProperties(objMeta);\r\n\r\n\t\t\tconst type = Objectype(objMeta);\r\n\t\t\tconst method = this.__gen[type] || this.__gen[TiledObjectType.DEFAULT];\r\n\t\t\tconst obj = method!.call(this, objMeta, tileset);\r\n\r\n\t\t\tif (!obj) {\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\r\n\t\t\t/*\r\n\t\t\tif (Config.usePixiDisplay) {\r\n\t\t\t\t(obj as any).parentGroup = (layerContatiner as any).group;\r\n\t\t\t\tstage.addChildAt(pixiObject, localZIndex);\r\n\t\t\t} else {\r\n\t\t\t\t*/\r\n\r\n\t\t\tlayerContatiner.addChildAt(obj, localZIndex);\r\n\t\t\t//}\r\n\r\n\t\t\tlocalZIndex++;\r\n\t\t}\r\n\r\n\t\treturn layerContatiner;\r\n\t},\r\n\r\n\t__convertLayer(imageLayer: ITiledImageLayer) {\r\n\t\tif (!imageLayer.image) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\t(imageLayer as any).objects = [\r\n\t\t\t{\r\n\t\t\t\timage: {\r\n\t\t\t\t\timage: imageLayer.image,\r\n\t\t\t\t},\r\n\t\t\t\t//imageLayer can't has gid ID\r\n\r\n\t\t\t\tgid: -1,\r\n\t\t\t\tname: imageLayer.name,\r\n\t\t\t\tx: imageLayer.x + imageLayer.offsetx,\r\n\t\t\t\ty: imageLayer.y + imageLayer.offsety,\r\n\r\n\t\t\t\tfromImageLayer: true,\r\n\t\t\t\tproperties: imageLayer.properties,\r\n\t\t\t\tparsedProps: imageLayer.parsedProps,\r\n\t\t\t} as ITiledSprite,\r\n\t\t];\r\n\r\n\t\treturn true;\r\n\t},\r\n};\r\n","import { ITiledLayer, ITiledTileLayer, ITiledMap, ITiledTile } from './ITiledMap';\r\nimport { TilesetManager } from './TilesetManagers';\r\nimport { LayerBuilder } from './LayerBuilder';\r\nimport { TiledMapContainer } from './TiledMapContainer';\r\nimport { TiledSprite } from './TiledSprite';\r\nimport { Config } from './Config';\r\nimport { TiledContainer } from './index';\r\nimport { TileAnimator } from './TiledAnimator';\r\n\r\nexport const TiledLayerBuilder = {\r\n\tBuild(layer: ITiledLayer, set: TilesetManager, zOrder: number = 0, tileMap: TiledMapContainer) {\r\n\t\tconst tiledLayer = layer as ITiledTileLayer;\r\n\t\tconst tileMapSource: ITiledMap = tileMap.source! as ITiledMap;\r\n\t\tconst layerContatiner = LayerBuilder.Build(layer, set, zOrder) as TiledContainer & {animators: Map<string, TileAnimator> };\r\n\r\n\t\tif(!layerContatiner) {\r\n\t\t\treturn undefined;\r\n\t\t}\r\n\r\n\t\tconst data = this.__decodeData(tiledLayer);\r\n\t\tconst { width, height } = layer;\r\n\t\tconst { tileheight, tilewidth } = tileMapSource;\r\n\r\n\t\tconst genTile = (x: number, y: number, gid: number)=>{\r\n\t\t\tconst tile = set.getTileByGid(gid);\r\n\r\n\t\t\tconst s = new TiledSprite(tile!);\r\n\t\t\t\r\n\t\t\ts.x = x * tilewidth;\r\n\t\t\ts.y = y * tileheight;\r\n\t\t\ts.roundPixels = Config.roundPixels;\r\n\r\n\t\t\tif(tile && tile.animation) {\r\n\t\t\t\tconst animators = layerContatiner.animators || new Map();\r\n\t\t\t\tconst animId = tile.tilesetId + \"_\" + tile.id;\r\n\r\n\t\t\t\tlet animator = animators.get(animId);\r\n\t\t\t\tif(!animator) {\r\n\t\t\t\t\tanimator = new TileAnimator(tile);\r\n\t\t\t\t\tanimators.set(animId, animator);\r\n\t\t\t\t}\r\n\r\n\t\t\t\ts.anim = animator;\r\n\t\t\t\tanimator.anim.play();\r\n\t\t\t}\r\n\r\n\t\t\treturn s;\r\n\t\t}\r\n\r\n\t\tfor (let y = 0; y < height; y++) {\r\n\t\t\tfor (let x = 0; x < width; x++) {\r\n\t\t\t\tconst index = x + y * width;\r\n\t\t\t\tconst gid = data[index];\r\n\r\n\t\t\t\t// skip gid 0,\r\n\t\t\t\tif(!gid) {\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlayerContatiner.addChild(genTile(x,y,data[index]));\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn layerContatiner;\r\n\t},\r\n\r\n\t__decodeData(layer: ITiledTileLayer): number[] {\r\n\t\treturn layer.data;\r\n\t},\r\n};\r\n","declare global {\r\n\tinterface Window {\r\n\t\tPIXI: any;\r\n\t}\r\n}\r\n\r\nconst VERSION = '__VERSION__';\r\n\r\nimport * as ContainerBuilder from './ContainerBuilder';\r\nimport * as SpriteBuilder from './SpriteBuilder';\r\nimport * as TextBuilder from './TextBuilder';\r\n\r\nimport { Parser, CreateStage } from './TiledObjectParser';\r\nimport { Config, ITiledProps, LayerBuildersMap } from './Config';\r\nimport { TiledContainer } from './TiledContainer';\r\nimport { InjectMixins } from './pixi-utils';\r\n\r\n// prevent circular\r\nObject.assign(LayerBuildersMap, {\r\n\ttilelayer: TiledLayerBuilder,\r\n\tobjectgroup: ObjectLayerBuilder,\r\n\timagelayer: ObjectLayerBuilder,\r\n\tgroup: undefined,\r\n});\r\n\r\nexport function Inject(pixiPack = window.PIXI, props: Partial<ITiledProps> | undefined = undefined) {\r\n\tif (!pixiPack) {\r\n\t\tconsole.warn(\r\n\t\t\t\"Auto injection works only with globals scoped PIXI, not in modules\\nuse 'Loader.registerPlugin(Parser)' otherwith\",\r\n\t\t);\r\n\t\treturn;\r\n\t}\r\n\r\n\tif (props) {\r\n\t\tObject.assign(Config, props);\r\n\t}\r\n\r\n\tInjectMixins(pixiPack);\r\n\r\n\tif (Config.injectMiddleware) {\r\n\t\tpixiPack.Loader.registerPlugin(Parser);\r\n\t}\r\n}\r\n\r\nimport * as Primitives from './TiledPrimitives';\r\nimport { MultiSpritesheet } from './TiledMultiSheet';\r\nimport { ObjectLayerBuilder } from './ObjectsLayerBuilder';\r\nimport { TiledLayerBuilder } from './TiledLayerBuilder';\r\nexport { Primitives };\r\nexport { Parser };\r\nexport { CreateStage };\r\nexport { Config };\r\nexport { ContainerBuilder };\r\nexport { SpriteBuilder };\r\nexport { TextBuilder };\r\nexport { TiledContainer };\r\nexport { MultiSpritesheet };\r\nexport { VERSION };\r\n"],"names":["TiledContainer","Container","[object Object]","this","Config","defSpriteAnchor","Point","debugContainers","usePixiDisplay","roundFontAlpha","injectMiddleware","roundPixels","LayerBuildersMap","HexStringToHexInt","value","length","substr","parseInt","e","console","warn","message","TiledObjectType","Objectype","meta","properties","container","DEFAULT","gid","image","IMAGE","undefined","text","TEXT","point","POINT","polygon","POLYGON","polyline","POLYLINE","ellipse","ELLIPSE","resolveTile","tilesets","tileSet","tilesetId","i","firstgid","error","realGid","find","tiles","filter","obj","id","img","Object","assign","_prepareProperties","layer","props","Array","p","val","type","name","spriteObject","vFlip","hFlip","dFlip","parsedProps","TiledRect","Rectangle","TiledPoint","x","y","super","TiledPolygon","Polygon","points","sX","delta","_x","xIndex","sY","_y","yIndex","rect","maxX","maxY","index","px","py","width","height","getBounds","h","factor","w","TiledPolypine","slice","TiledEllipse","Ellipse","hw","hh","BuildPrimitive","prim","Utils.Objectype","Utils.TiledObjectType","poses","map","types","split","visible","TileAnimator","tile","Set","animation","Error","_tile","_animator","AnimatedSprite","onFrameChange","__onFrame","bind","_childs","forEach","texture","anim","s","strict","has","tileFrame","add","delete","TiledSprite","Sprite","createAnimator","remove","ApplyMeta","target","tiledId","rotation","Math","PI","primitive","Primitives.BuildPrimitive","isNaN","opacity","alpha","Number","source","setTimeout","Graphics","lineStyle","drawRect","endFill","parent","addChild","Build","indexOf","Texture","WHITE","anchor","pivot","hitArea","sprite","a","play","loop","animLoop","fromImageLayer","ContainerBuilder.ApplyMeta","objectgroup","objects","scale","pixiText","Text","wordWrap","wrap","wordWrapWidth","fill","Utils.HexStringToHexInt","color","align","valign","fontFamily","fontfamily","fontWeight","bold","fontStyle","italic","fontSize","pixelsize","set","halign","position","style","stroke","strokeColor","strokeThickness","padding","fontPadding","MultiSpritesheet","sheets","element","sheet","push","tex","images","textures","spr","animations","FixedImageResource","resources","ImageResource","Promise","res","rej","rejector","onError","load","then","TilesetManager","utils","EventEmitter","_tileSets","register","keys","_sheet","addTexture","spritesheet","tryLoad","loadUnknowImages","getTileByTile","skipAnim","fromSheet","atile","tileid","time","duration","absUrl","baseUrl","lazyLoad","_tryLoadTexture","_cropTile","frame","colls","columns","margin","tilecount","space","spacing","xId","yId","baseTexture","tilewidth","tileheight","url","autoLoad","crossorigin","BaseTexture","addToCache","_loadQueue","emit","catch","finally","loaded","TiledMapContainer","showHello","CreateStage","_data","log","useDisplay","PIXI","display","stage","layerHeight","layerWidth","layers","zOrder","reverse","builder","pixiLayer","Parser","next","data","cropName","RegExp","replace","match","once","Parse","call","InjectMixins","pixiPackage","pack","PIXI.Container","prototype","getChildByPath","path","children","result","isIndex","trim","ch","mathes","getChildByName","addGlobalChild","child","transform","updateLocalTransform","loc","PIXI.Matrix","invert","localTransform","clone","newChild","copyFrom","append","setFromMatrix","DisplayObject","replaceWithTransform","from","updateTransform","addChildAt","getChildIndex","onceAsync","event","context","emitter","LayerBuilder","tileset","Layer","Group","ignore","ignoreLoad","layerObject","ObjectLayerBuilder","__gen","smeta","getTileByGid","SB.Build","TB.Build","CB.Build","objLayer","layerContatiner","__convertLayer","localZIndex","objMeta","imageLayer","offsetx","offsety","TiledLayerBuilder","tileMap","tiledLayer","tileMapSource","__decodeData","genTile","animators","Map","animId","animator","get","tilelayer","imagelayer","group","pixiPack","window","Loader","registerPlugin"],"mappings":"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"}