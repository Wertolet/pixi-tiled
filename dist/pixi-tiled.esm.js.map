{"version":3,"file":"pixi-tiled.esm.js","sources":["../src/objects/TiledContainer.ts","../src/Config.ts","../src/objects/TiledAnimator.ts","../src/tools/TiledObjectType.ts","../src/objects/TiledPrimitives.ts","../src/tools/Utils.ts","../src/objects/TiledSprite.ts","../src/builders/ContainerBuilder.ts","../src/builders/SpriteBuilder.ts","../src/builders/TextBuilder.ts","../src/tools/TiledMultiSheet.ts","../src/tools/TilesetManagers.ts","../src/objects/TiledMapContainer.ts","../src/tools/TiledObjectParser.ts","../src/pixi-utils/ContainerExt.ts","../src/pixi-utils/DisplayExt.ts","../src/pixi-utils/EventEmitterExt.ts","../src/pixi-utils/index.ts","../src/layers/LayerBuilder.ts","../src/layers/ObjectsLayerBuilder.ts","../src/layers/TiledLayerBuilder.ts","../src/index.ts"],"sourcesContent":["import type { Text } from '@pixi/text';\r\nimport { Container } from '@pixi/display';\r\nimport type { ITiledPtimitive } from './TiledPrimitives';\r\nimport type { Rectangle } from '@pixi/math'\r\nimport type { IParsedProps, ITiledLayer, ITiledObject, ITiledFrame, ITiledMap } from './../ITiledMap';\r\n\r\nexport class TiledContainer extends Container {\r\n\tlayerHeight: number = 0;\r\n\tlayerWidth: number = 0;\r\n\ttext?: Text;\r\n\tprimitive?: ITiledPtimitive;\r\n\ttiledId?: number;\r\n\tproperties?: IParsedProps;\r\n\tlayers?: {[key: string]: Container};\r\n\tsource?: ITiledLayer | ITiledObject | ITiledMap;\r\n\ttileFrame?: ITiledFrame;\r\n\tname?: string;\r\n\ttypes?: string[];\r\n\thitArea?: Rectangle;\r\n}\r\n","import { Point } from \"@pixi/math\";\r\nimport { ILayerBuilder } from \"./layers/LayerBuilder\";\r\n\r\nexport interface ITiledProps {\r\n\tdefSpriteAnchor: Point;\r\n\tdebugContainers: boolean;\r\n\tusePixiDisplay: boolean;\r\n\troundFontAlpha: boolean;\r\n\tinjectMiddleware: boolean;\r\n\troundPixels: boolean;\r\n}\r\n\r\nexport const Config: ITiledProps = {\r\n\tdefSpriteAnchor: new Point(0, 1),\r\n\tdebugContainers: false,\r\n\tusePixiDisplay: false,\r\n\troundFontAlpha: false,\r\n\tinjectMiddleware: true,\r\n\troundPixels: true\r\n};\r\n\r\nexport const LayerBuildersMap: { [key: string]: ILayerBuilder | undefined } = {};\r\n","import { TiledSprite } from \"./TiledSprite\";\r\nimport { AnimatedSprite, FrameObject } from \"@pixi/sprite-animated\";\r\nimport { ITiledTile } from \"./../ITiledMap\";\r\n\r\nexport class TileAnimator {\r\n\tprivate _animator: AnimatedSprite;\r\n\tprivate _childs: Set<TiledSprite> = new Set();\r\n\tprivate _tile: ITiledTile;\r\n\r\n\tconstructor(tile: ITiledTile) {\r\n\r\n\t\tif(!tile.animation) {\r\n\t\t\tthrow new Error(\"Tile has not animation!\");\r\n\t\t}\r\n\r\n\t\tthis._tile = tile;\r\n\t\tthis._animator = new AnimatedSprite(<FrameObject[]> <any> tile.animation);\r\n\t\tthis._animator.onFrameChange = this.__onFrame.bind(this);\r\n\t}\r\n\r\n\t__onFrame() {\r\n\t\tthis._childs.forEach((e)=> e.texture = <any> this._animator.texture);\r\n\t}\r\n\r\n\tget anim() {\r\n\t\treturn this._animator;\r\n\t}\r\n\r\n\tadd(s: TiledSprite, strict = true) {\r\n\t\tif(!s) return;\r\n\r\n\t\t// prevent stack \r\n\t\tif(this._childs.has(s)) return;\r\n\t\t\r\n\t\ts.anim = this;\r\n\r\n\t\tif(s.tileFrame !== this._tile && strict) {\r\n\t\t\tthrow (`Invalid sprite! One Animator per tile type! Pased ${s.tileFrame!.id} should be ${this._tile.id}`);\r\n\t\t}\r\n\r\n\t\tthis._childs.add(s);\r\n\t}\r\n\r\n\tremove(s: TiledSprite) {\r\n\t\tthis._childs.delete(s);\r\n\t}\r\n}","export enum TiledObjectType {\r\n\tDEFAULT,\r\n\tPOINT,\r\n\tPOLYGON,\r\n\tPOLYLINE,\r\n\tELLIPSE,\r\n\tTEXT,\r\n\tIMAGE,\r\n}\r\n\r\n// https://doc.mapeditor.org/en/stable/reference/json-map-format/\r\n\r\nexport function Objectype(meta: any): TiledObjectType {\r\n\tif (meta.properties && meta.properties.container) return TiledObjectType.DEFAULT;\r\n\tif (meta.gid || meta.image) return TiledObjectType.IMAGE;\r\n\tif (meta.text != undefined) return TiledObjectType.TEXT;\r\n\tif (meta.point) return TiledObjectType.POINT;\r\n\tif (meta.polygon) return TiledObjectType.POLYGON;\r\n\tif (meta.polyline) return TiledObjectType.POLYLINE;\r\n\tif (meta.ellipse) return TiledObjectType.ELLIPSE;\r\n\r\n\treturn TiledObjectType.DEFAULT;\r\n}","import { Rectangle, Point, Polygon, Ellipse } from \"@pixi/math\";\r\nimport { ITiledObject } from \"./../ITiledMap\";\r\nimport { TiledObjectType, Objectype } from \"../tools/TiledObjectType\";\r\n\r\nexport interface ITiledPtimitive {\r\n\tname: string;\r\n\ttypes: Array<string>;\r\n\tvisible: boolean;\r\n}\r\n\r\nexport class TiledRect extends Rectangle implements ITiledPtimitive {\r\n\tname: string = \"\";\r\n\ttypes: string[] = [];\r\n\tvisible: boolean = true;\r\n}\r\n\r\nexport class TiledPoint extends Point implements ITiledPtimitive {\r\n\tname: string = \"\";\r\n\ttypes: string[] = [];\r\n\tvisible: boolean = true;\r\n\r\n\tconstructor(x?: number, y?: number) {\r\n\t\tsuper(x, y);\r\n\t}\r\n}\r\n\r\nexport class TiledPolygon extends Polygon implements ITiledPtimitive {\r\n\tname: string = \"\";\r\n\ttypes: string[] = [];\r\n\tvisible: boolean = true;\r\n\r\n\tprivate _x: number = 0;\r\n\tprivate _y: number = 0;\r\n\r\n\tconstructor(points: Point[]) {\r\n\t\tsuper(points);\r\n\t}\r\n\r\n\tset x(sX: number) {\r\n\t\tconst delta = sX - this._x;\r\n\t\tthis._x = sX;\r\n\r\n\t\tfor (let xIndex = 0; xIndex < this.points.length; xIndex += 2) {\r\n\t\t\tthis.points[xIndex] += delta;\r\n\t\t}\r\n\t}\r\n\r\n\tset y(sY: number) {\r\n\t\tconst delta = sY - this._y;\r\n\t\tthis._y = sY;\r\n\r\n\t\tfor (let yIndex = 1; yIndex < this.points.length; yIndex += 2) {\r\n\t\t\tthis.points[yIndex] += delta;\r\n\t\t}\r\n\t}\r\n\r\n\tget x(): number {\r\n\t\treturn this._x;\r\n\t}\r\n\r\n\tget y(): number {\r\n\t\treturn this._y;\r\n\t}\r\n\r\n\tgetBounds(): Rectangle {\r\n\t\tlet rect = new Rectangle();\r\n\r\n\t\tlet maxX: number = this._x;\r\n\t\tlet maxY: number = this._y;\r\n\r\n\t\tfor (let index = 0; index < this.points.length; index += 2) {\r\n\t\t\tconst px = this.points[index];\r\n\t\t\tconst py = this.points[index + 1];\r\n\r\n\t\t\trect.x = px < rect.x ? px : rect.x;\r\n\t\t\trect.y = py < rect.y ? py : rect.y;\r\n\r\n\t\t\tmaxX = px > maxX ? px : maxX;\r\n\t\t\tmaxY = py > maxY ? py : maxY;\r\n\t\t}\r\n\r\n\t\trect.width = maxX - rect.x;\r\n\t\trect.height = maxY - rect.y;\r\n\r\n\t\treturn rect;\r\n\t}\r\n\r\n\tget width(): number {\r\n\t\treturn this.getBounds().width;\r\n\t}\r\n\r\n\tget height(): number {\r\n\t\treturn this.getBounds().height;\r\n\t}\r\n\r\n\tset height(h: number) {\r\n\t\tconst factor = h / this.height;\r\n\r\n\t\tfor (let yIndex = 1; yIndex < this.points.length; yIndex += 2) {\r\n\t\t\tconst delta = (this.points[yIndex] - this._y) * factor;\r\n\t\t\tthis.points[yIndex] = this._y + delta;\r\n\t\t}\r\n\t}\r\n\r\n\tset width(w: number) {\r\n\t\tconst factor = w / this.width;\r\n\r\n\t\tfor (let xIndex = 0; xIndex < this.points.length; xIndex += 2) {\r\n\t\t\tconst delta = (this.points[xIndex] - this._x) * factor;\r\n\t\t\tthis.points[xIndex] = this._x + delta;\r\n\t\t}\r\n\t}\r\n}\r\n\r\nexport class TiledPolypine implements ITiledPtimitive {\r\n\tname: string = \"\";\r\n\ttypes: string[] = [];\r\n\tvisible: boolean = true;\r\n\r\n\tpoints: Array<Point> = [];\r\n\r\n\tconstructor(points: Array<Point>) {\r\n\t\tthis.points = points.slice();\r\n\t}\r\n}\r\n\r\nexport class TiledEllipse extends Ellipse implements ITiledPtimitive {\r\n\tname: string = \"\";\r\n\ttypes: string[] = [];\r\n\tvisible: boolean = true;\r\n\r\n\tconstructor(x?: number, y?: number, hw?: number, hh?: number) {\r\n\t\tsuper(x, y, hw, hh);\r\n\t}\r\n}\r\n\r\nexport function BuildPrimitive( meta: ITiledObject ): ITiledPtimitive | undefined {\r\n\t\r\n\tif (!meta) {\r\n\t\treturn;\r\n\t}\r\n\r\n\tlet prim: ITiledPtimitive | undefined = undefined;\r\n\r\n\tconst type: TiledObjectType = Objectype(meta);\r\n\r\n\tmeta.x = meta.x || 0;\r\n\tmeta.y = meta.y || 0;\r\n\r\n\tswitch (type) {\r\n\t\tcase TiledObjectType.ELLIPSE: {\r\n\t\t\tprim = new TiledEllipse(\r\n\t\t\t\tmeta.x + 0.5 * meta.width,\r\n\t\t\t\tmeta.y + 0.5 * meta.height,\r\n\t\t\t\tmeta.width * 0.5,\r\n\t\t\t\tmeta.height * 0.5\r\n\t\t\t);\r\n\t\t\tbreak;\r\n\t\t}\r\n\t\tcase TiledObjectType.POLYGON: {\r\n\t\t\tconst points = meta.polygon!;\r\n\t\t\tconst poses = points.map(p => {\r\n\t\t\t\treturn new Point(p.x + meta.x, p.y + meta.y);\r\n\t\t\t});\r\n\t\t\t\r\n\t\t\tprim = new TiledPolygon(poses);\r\n\t\t\tbreak;\r\n\t\t}\r\n\t\tcase TiledObjectType.POLYLINE: {\r\n\t\t\tconst points = meta.polygon!;\r\n\t\t\tconst poses = points.map(p => {\r\n\t\t\t\treturn new Point(p.x + meta.x, p.y + meta.y);\r\n\t\t\t});\r\n\r\n\t\t\tprim = new TiledPolypine(poses);\r\n\t\t\tbreak;\r\n\t\t}\r\n\t\tdefault:\r\n\t\t\tprim = new TiledRect(meta.x, meta.y, meta.width, meta.height);\r\n\t}\r\n\r\n\tprim.types = meta.type ? meta.type.split(\":\") : [];\r\n\tprim.visible = meta.visible;\r\n\tprim.name = meta.name;\r\n\t\r\n\treturn prim;\r\n}\r\n","import {\r\n\tITiledTileset,\r\n\tITiledMap,\r\n\tIParsedProps,\r\n\tITiledLayer,\r\n\tITiledObject,\r\n\tITiledSprite,\r\n\tITiledTile\r\n} from '../ITiledMap';\r\n\r\nimport { Sprite } from '@pixi/sprite';\r\nimport { Graphics } from '@pixi/graphics';\r\nimport { Config } from '../Config';\r\nimport { BuildPrimitive } from './../objects/TiledPrimitives';\r\nimport { TiledContainer } from './../objects/TiledContainer';\r\n\r\nexport function HexStringToHexInt(value: string | number): number {\r\n\tif (!value) return 0;\r\n\r\n\tif (typeof value == 'number') return value;\r\n\r\n\tvalue = value.length > 7 ? value.substr(3, 6) : value.substr(1, 6);\r\n\r\n\ttry {\r\n\t\treturn parseInt(value, 16);\r\n\t} catch (e) {\r\n\t\tconsole.warn('Color parse error:', e.message);\r\n\t\treturn 0;\r\n\t}\r\n}\r\n\r\nexport function HexStringToAlpha(value: string | number): number {\r\n\tif (!value) return 1;\r\n\tif (typeof value == 'number') return value;\r\n\r\n\tif (value.length <= 7) return 1;\r\n\r\n\ttry {\r\n\t\treturn parseInt(value.substr(1, 2), 16) / 255.0;\r\n\t} catch (e) {\r\n\t\tconsole.warn('Alpha parse error:', e.message);\r\n\t\treturn 1;\r\n\t}\r\n}\r\n\r\nexport function resolveTile(tilesets: ITiledTileset[], gid: number) {\r\n\tlet tileSet = undefined; //_data.tilesets[0];\r\n\tlet tilesetId = 0;\r\n\r\n\tfor (let i = 0; i < tilesets.length; i++) {\r\n\t\tif (tilesets[i].firstgid <= gid) {\r\n\t\t\ttileSet = tilesets[i];\r\n\t\t\ttilesetId = i;\r\n\t\t}\r\n\t}\r\n\r\n\tif (!tileSet) {\r\n\t\tconsole.error('Image with gid:' + gid + ' not found!');\r\n\t\treturn null;\r\n\t}\r\n\r\n\tconst realGid = gid - tileSet.firstgid;\r\n\r\n\tlet find = undefined;\r\n\tif (tileSet.tiles !== undefined)\r\n\t{\r\n\t\tfind = tileSet.tiles!.filter(obj => obj.id == realGid)[0];\r\n\t}\r\n\tif (find === undefined)\r\n\t{\r\n\t\tfind = {id: realGid} as ITiledTile; \r\n\t}\r\n\r\n\tlet img = Object.assign({}, find, { tilesetId });\r\n\r\n\tif (!img) {\r\n\t\tconsole.error('Load res MISSED gid:' + realGid);\r\n\t\treturn null;\r\n\t}\r\n\r\n\treturn img;\r\n}\r\n\r\nexport function _prepareProperties(layer: ITiledMap | ITiledLayer | ITiledObject) {\r\n\tlet props: IParsedProps = {};\r\n\r\n\tif (layer.properties) {\r\n\t\tif (layer.properties instanceof Array) {\r\n\t\t\tfor (var p of layer.properties) {\r\n\t\t\t\tlet val = p.value;\r\n\t\t\t\tif (p.type == 'color') {\r\n\t\t\t\t\tval = HexStringToHexInt(val as string);\r\n\t\t\t\t}\r\n\t\t\t\tprops[p.name] = val;\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\t// old tiled format\r\n\t\t\tprops = layer.properties;\r\n\t\t}\r\n\t}\r\n\r\n\tconst spriteObject = layer as ITiledSprite;\r\n\r\n\t// http://doc.mapeditor.org/en/stable/reference/tmx-map-format/#tile-flipping\r\n\tif (spriteObject.gid > 0) {\r\n\t\tconst gid = spriteObject.gid;\r\n\r\n\t\tconst vFlip = !!(gid & 0x40000000);\r\n\t\tconst hFlip = !!(gid & 0x80000000);\r\n\t\tconst dFlip = !!(gid & 0x20000000);\r\n\r\n\t\tprops['vFlip'] = vFlip;\r\n\t\tprops['hFlip'] = hFlip;\r\n\t\tprops['dFlip'] = dFlip;\r\n\r\n\t\tspriteObject.vFlip = vFlip;\r\n\t\tspriteObject.hFlip = hFlip;\r\n\r\n\t\tconst realGid = gid & ~(0x40000000 | 0x80000000 | 0x20000000);\r\n\t\tspriteObject.gid = realGid;\r\n\t}\r\n\r\n\tlayer.parsedProps = props;\r\n}\r\n\r\nexport function ApplyMeta(meta: ITiledObject | ITiledLayer, target: TiledContainer) {\r\n\ttarget.name = meta.name;\r\n\ttarget.tiledId = meta.id;\r\n\ttarget.width = meta.width || target.width;\r\n\ttarget.height = meta.height || target.height;\r\n\ttarget.rotation = (((meta as ITiledObject).rotation || 0) * Math.PI) / 180.0;\r\n\r\n\ttarget.x = meta.x || 0;\r\n\ttarget.y = meta.y || 0;\r\n\r\n\ttarget.visible = meta.visible == undefined ? true : meta.visible;\r\n\ttarget.types = meta.type ? meta.type.split(\":\") : [];\r\n\r\n\ttarget.primitive = BuildPrimitive(meta as ITiledObject);\r\n\r\n\tconst props = meta.parsedProps;\r\n\r\n\tif (props) {\r\n\t\tif (!isNaN(props.opacity as number)) {\r\n\t\t\ttarget.alpha = Number(props.opacity);\r\n\t\t}\r\n\r\n\t\t//@ts-ignore\r\n\t\tObject.assign(target, props);\r\n\r\n\t\ttarget.properties = props;\r\n\t}\r\n\r\n\ttarget.source = meta;\r\n\r\n\tif (Config.debugContainers) {\r\n\t\tsetTimeout(() => {\r\n\t\t\tconst rect = new Graphics();\r\n\r\n\t\t\trect.lineStyle(2, 0xff0000, 0.7)\r\n\t\t\t\t.drawRect(target.x, target.y, meta.width, meta.height)\r\n\t\t\t\t.endFill();\r\n\t\t\tif (target instanceof Sprite) {\r\n\t\t\t\trect.y -= target.height;\r\n\t\t\t}\r\n\r\n\t\t\ttarget.parent.addChild<any>(rect);\r\n\t\t}, 30);\r\n\t}\r\n}","import { Sprite } from '@pixi/sprite';\r\nimport { ITiledTile, ITiledSprite, ITiledObjectLayer } from './../ITiledMap';\r\nimport { TileAnimator } from './TiledAnimator';\r\nimport { Config } from './../Config';\r\nimport { BuildPrimitive } from './TiledPrimitives';\r\nimport { ITiledPtimitive } from './TiledPrimitives';\r\nimport { ApplyMeta } from '../tools/Utils';\r\n\r\nexport class TiledSprite extends Sprite {\r\n\tpublic tileFrame?: ITiledTile;\r\n\tpublic source?: ITiledSprite;\r\n\tpublic primitives: ITiledPtimitive[] = [];\r\n\tpublic properties: Record<string, any> = {};\r\n\t\r\n\tprivate _animator?: TileAnimator;\r\n\r\n\tconstructor(source: ITiledSprite, createAnimator = false, autoInit = true) {\r\n\t\tsuper(source.image!.texture);\r\n\r\n\t\tthis.source = source;\r\n\t\tthis.tileFrame = source.image!;\r\n\r\n\t\tif (createAnimator && this.tileFrame.animation) {\r\n\t\t\tthis.anim = new TileAnimator(this.tileFrame!);\r\n\t\t}\r\n\r\n\t\tif(autoInit) {\r\n\t\t\tthis.init();\r\n\t\t}\r\n\t}\r\n\r\n\tinit() {\r\n\t\tApplyMeta(this.source!, this as any);\r\n\r\n\t\tif (this.anim) {\r\n\t\t\tconst a = this.anim.anim;\r\n\r\n\t\t\tthis.properties!.animPlaying && a.play();\r\n\t\t\ta.loop = this.properties!.animLoop !== undefined ? !!this.properties!.animLoop : true;\r\n\t\t}\r\n\r\n\t\t//TODO Set anchor and offsets to center (.5, .5)\r\n\t\tif (this.source!.gid) {\r\n\t\t\tthis.anchor.copyFrom( (this.source!.anchor ||  Config.defSpriteAnchor) as any);\r\n\t\t}\r\n\r\n\t\tconst obj = this.tileFrame!.objectgroup as ITiledObjectLayer;\r\n\r\n\t\tif (obj) {\r\n\t\t\tthis.primitives = obj.objects.map(e => BuildPrimitive(e)!);\r\n\t\t}\r\n\r\n\t\tconst hFlip = this.source!.hFlip;\r\n\t\tconst vFlip = this.source!.vFlip;\r\n\r\n\t\tif (hFlip) {\r\n\t\t\tthis.scale.x *= -1;\r\n\t\t\tthis.anchor.x = 1;\r\n\t\t}\r\n\r\n\t\tif (vFlip) {\r\n\t\t\tthis.scale.y *= -1;\r\n\t\t\tthis.anchor.y = 0;\r\n\t\t}\r\n\t}\r\n\r\n\tset anim(anim: TileAnimator | undefined) {\r\n\t\tif (anim === this._animator) return;\r\n\r\n\t\tif (this._animator) {\r\n\t\t\tthis._animator.remove(this);\r\n\t\t}\r\n\t\tthis._animator = anim;\r\n\r\n\t\tanim && anim.add(this);\r\n\t}\r\n\r\n\tget anim() {\r\n\t\treturn this._animator;\r\n\t}\r\n\r\n\tclone() {\r\n\t\tconst sprite = new TiledSprite(this.source!, true);\r\n\t\tsprite.init();\r\n\r\n\t\treturn sprite;\r\n\t}\r\n}\r\n","import { TiledContainer } from \"./../objects/TiledContainer\";\r\nimport { Config } from \"../Config\";\r\nimport { Rectangle } from \"@pixi/math\";\r\nimport { Texture } from \"@pixi/core\";\r\n\r\nimport { ITiledObject, ITiledSprite } from \"../ITiledMap\";\r\nimport { TiledSprite } from \"./../objects/TiledSprite\";\r\nimport { ApplyMeta } from \"../tools/Utils\";\r\n\r\nexport function Build(meta: ITiledObject): TiledContainer | TiledSprite {\r\n\tconst types: Array<string> = meta.type ? meta.type.split(\":\") : [];\r\n\r\n\tlet container = undefined; // new TiledOG.TiledContainer();\r\n\r\n\tif (types.indexOf(\"mask\") > -1) {\r\n\t\tconst source = {\r\n\t\t\timage: {\r\n\t\t\t\ttexture: Texture.WHITE,\r\n\t\t\t\tid: - 1,\r\n\t\t\t},\r\n\t\t\tfromImageLayer: true\r\n\t\t} as ITiledSprite\r\n\t\tcontainer = new TiledSprite(source);\r\n\t} else {\r\n\t\tcontainer = new TiledContainer();\r\n\t\tApplyMeta(meta, container as TiledContainer);\r\n\t}\r\n\r\n\tif (meta.gid) {\r\n\t\tcontainer.pivot = Config.defSpriteAnchor as any;\r\n\t\t(<TiledContainer> container).hitArea = new Rectangle(0, 0, meta.width, meta.height);\r\n\t}\r\n\r\n\treturn container;\r\n}\r\n","\r\nimport { Sprite } from \"@pixi/sprite\";\r\nimport { ITiledSprite } from \"../ITiledMap\";\r\nimport { TiledSprite } from \"./../objects/TiledSprite\";\r\n\r\nexport function Build(meta: ITiledSprite): TiledSprite {\r\n\t// legacy\r\n\tconst sprite = new TiledSprite(meta, true);\r\n\r\n\treturn sprite;\r\n}\r\n","import { TiledContainer } from \"./../objects/TiledContainer\";\r\nimport { Text, TextStyle } from \"@pixi/text\";\r\nimport { Config } from \"../Config\";\r\nimport * as Utils from \"../tools/Utils\";\r\nimport { ITiledObject } from \"../ITiledMap\";\r\nimport { ApplyMeta } from \"../tools/Utils\";\r\n\r\nexport function Build(meta: ITiledObject): TiledContainer {\r\n\tconst container = new TiledContainer();\r\n\tconst text = meta.text!;\r\n\r\n\tlet pixiText = new Text(text.text, {\r\n\t\twordWrap: text.wrap,\r\n\t\twordWrapWidth: meta.width,\r\n\t\tfill: Utils.HexStringToHexInt(text.color || \"#000000\") || 0x000000,\r\n\t\talign: text.valign || \"top\",\r\n\t\tfontFamily: text.fontfamily || \"sans-serif\",\r\n\t\tfontWeight: text.bold ? \"bold\" : \"normal\",\r\n\t\tfontStyle: text.italic ? \"italic\" : \"normal\",\r\n\t\tfontSize: text.pixelsize || \"16px\"\r\n\t} as TextStyle);\r\n\r\n\t//@ts-ignore\r\n\tpixiText.name = meta.name + \"_Text\";\r\n\r\n\tpixiText.roundPixels = !!Config.roundFontAlpha;\r\n\r\n\tconst props = meta.parsedProps;\r\n\r\n\t// clear properties\r\n\tmeta.properties = [];\r\n\tmeta.parsedProps = {};\r\n\r\n\tApplyMeta(meta, container);\r\n\tcontainer.pivot.set(0, 0);\r\n\r\n\tswitch (text.halign) {\r\n\t\tcase \"right\":\r\n\t\t\t{\r\n\t\t\t\tpixiText.anchor.x = 1;\r\n\t\t\t\tpixiText.position.x = meta.width;\r\n\t\t\t}\r\n\t\t\tbreak;\r\n\t\tcase \"center\":\r\n\t\t\t{\r\n\t\t\t\tpixiText.anchor.x = 0.5;\r\n\t\t\t\tpixiText.position.x = meta.width * 0.5;\r\n\t\t\t}\r\n\t\t\tbreak;\r\n\t\tdefault:\r\n\t\t\t{\r\n\t\t\t\tpixiText.anchor.x = 0;\r\n\t\t\t\tpixiText.position.x = 0;\r\n\t\t\t}\r\n\t\t\tbreak;\r\n\t}\r\n\r\n\tswitch (text.valign) {\r\n\t\tcase \"bottom\":\r\n\t\t\t{\r\n\t\t\t\tpixiText.anchor.y = 1;\r\n\t\t\t\tpixiText.position.y = meta.height;\r\n\t\t\t}\r\n\t\t\tbreak;\r\n\t\tcase \"center\":\r\n\t\t\t{\r\n\t\t\t\tpixiText.anchor.y = 0.5;\r\n\t\t\t\tpixiText.position.y = meta.height * 0.5;\r\n\t\t\t}\r\n\t\t\tbreak;\r\n\t\tdefault:\r\n\t\t\t{\r\n\t\t\t\tpixiText.anchor.y = 0;\r\n\t\t\t\tpixiText.position.y = 0;\r\n\t\t\t}\r\n\t\t\tbreak;\r\n\t}\r\n\r\n\tif (props) {\r\n\t\tpixiText.style.stroke =\r\n\t\t\tUtils.HexStringToHexInt(props.strokeColor as string) || 0;\r\n\r\n\t\tpixiText.style.strokeThickness = +props.strokeThickness || 0;\r\n\t\tpixiText.style.padding = +props.fontPadding || 0;\r\n\r\n\t\tObject.assign(pixiText, props);\r\n\t}\r\n\r\n\t//_cont.parentGroup = _layer.group;\r\n\tcontainer.addChild(<any> pixiText);\r\n\r\n\t//@ts-ignore\r\n\tcontainer.text = pixiText;\r\n\r\n\tcontainer.properties = props;\r\n\r\n\treturn container;\r\n}","import type { Texture } from \"@pixi/core\";\r\nimport type { Spritesheet } from \"@pixi/spritesheet\";\r\n\r\nexport class MultiSpritesheet {\r\n\tsheets: Array<Spritesheet | MultiSpritesheet> = [];\r\n\timages: { [name: string]: Texture<any> } = {};\r\n\r\n\tconstructor(sheets?: Spritesheet[]) {\r\n\t\tif (sheets) {\r\n\t\t\tsheets.forEach(element => {\r\n\t\t\t\tthis.add(element);\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\tadd(sheet?: Spritesheet | MultiSpritesheet) {\r\n\t\tif (!sheet) throw \"Sheet can't be undefined\";\r\n\t\tif (sheet === this) throw \"U can't add self to spritesheet\";\r\n\r\n\t\tthis.sheets.push(sheet);\r\n\t}\r\n\r\n\taddTexture(tex: Texture, id: string) {\r\n\t\tthis.images[id] = tex;\r\n\t}\r\n\r\n\tget textures(): { [name: string]: Texture<any> } {\r\n\t\tlet map: { [name: string]: Texture<any> } = {};\r\n\r\n\t\tfor (const spr of this.sheets) {\r\n\t\t\tObject.assign(map, spr.textures);\r\n\t\t}\r\n\r\n\t\tObject.assign(map, this.images);\r\n\r\n\t\treturn map;\r\n\t}\r\n\r\n\tget animations(): { [name: string]: Texture[] } {\r\n\t\tlet map: { [name: string]: Texture[] } = {};\r\n\r\n\t\tfor (const spr of this.sheets) {\r\n\t\t\t// can be looped\r\n\t\t\tObject.assign(map, spr.animations);\r\n\t\t}\r\n\r\n\t\treturn map;\r\n\t}\r\n}\r\n","import { ITiledTileset, ITiledTile } from '../ITiledMap';\r\nimport { MultiSpritesheet } from './TiledMultiSheet';\r\nimport { resolveTile } from './Utils';\r\n\r\nimport { Spritesheet } from '@pixi/spritesheet';\r\nimport { Rectangle } from '@pixi/math';\r\nimport { Texture, BaseTexture, ImageResource } from '@pixi/core';\r\nimport { EventEmitter } from '@pixi/utils';\r\n\r\nexport class TilesetManager extends EventEmitter {\r\n\tprivate _sheet: MultiSpritesheet = new MultiSpritesheet();\r\n\tprivate _loadQueue: number = 0;\r\n\r\n\t/**\r\n\t * @description Base url for all images\r\n\t */\r\n\tpublic baseUrl: string = '';\r\n\r\n\t/**\r\n\t * @description Preload images which not exist in spritesheet\r\n\t */\r\n\tpublic loadUnknowImages: boolean = true;\r\n\r\n\tconstructor(private _tileSets: ITiledTileset[], sheet?: MultiSpritesheet | Spritesheet | Record<string, Texture<any>>) {\r\n\t\tsuper();\r\n\r\n\t\tif (sheet) {\r\n\t\t\tif (sheet!.textures) {\r\n\t\t\t\tthis.register(sheet as MultiSpritesheet);\r\n\t\t\t} else {\r\n\t\t\t\tObject.keys(sheet).forEach(e => {\r\n\t\t\t\t\tthis._sheet.addTexture((sheet as Record<string, Texture>)[e], e);\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tregister(spritesheet: MultiSpritesheet | Spritesheet) {\r\n\t\tthis._sheet.add(spritesheet);\r\n\t}\r\n\r\n\tget spritesheet() {\r\n\t\treturn this._sheet;\r\n\t}\r\n\r\n\tgetTileByGid(gid: number, tryLoad = this.loadUnknowImages): ITiledTile | undefined {\r\n\t\tconst tile = resolveTile(this._tileSets, gid);\r\n\t\treturn this.getTileByTile(tile, tryLoad);\r\n\t}\r\n\r\n\tgetTileByTile(tile: ITiledTile | null, tryLoad = this.loadUnknowImages, skipAnim = false) {\r\n\t\tif (!tile) {\r\n\t\t\treturn undefined;\r\n\t\t}\r\n\t\tconst set = this._tileSets[tile.tilesetId!];\r\n\r\n\t\tif(!tile.image && set.image) {\r\n\t\t\ttile.fromSheet = true;\r\n\t\t\ttile.image = set.image;\r\n\t\t}\r\n\r\n\t\tif(!tile.image) {\r\n\t\t\treturn undefined;\r\n\t\t};\r\n\r\n\t\tif (tile.animation && !skipAnim) {\r\n\t\t\ttile.animation.forEach(e => {\r\n\t\t\t\tconst atile = set.tiles!.filter(obj => obj.id == e.tileid)[0];\r\n\t\t\t\tatile.tilesetId = tile.tilesetId;\r\n\t\t\t\te.texture = this.getTileByTile(atile, tryLoad, true)!.texture;\r\n\t\t\t\te.time = e.duration;\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\tlet texture = this.spritesheet.textures[tile.image];\r\n\r\n\t\ttile.lazyLoad = false;\r\n\r\n\t\tconst absUrl = this._relativeToAbsolutePath(this.baseUrl, tile.image!);\r\n\r\n\t\t//Texture not found by relative path\r\n\t\tif (!texture) {\r\n\t\t\t//Try to find by absolute path\r\n\t\t\ttexture = this.spritesheet.textures[absUrl];\r\n\t\t}\r\n\r\n\t\tif (!texture && tryLoad) {\r\n\t\t\ttexture = this._tryLoadTexture(absUrl, tile);\r\n\r\n\t\t\ttile.lazyLoad = true;\r\n\r\n\t\t\tthis._sheet.addTexture(texture, tile.image);\r\n\t\t}\r\n\r\n\t\tif(texture && tile.fromSheet) {\r\n\t\t\ttexture = this._cropTile(set, tile, texture);\r\n\t\t}\r\n\r\n\t\ttile.texture = texture;\r\n\r\n\t\treturn tile;\r\n\t}\r\n\r\n\tgetTileSetByGid(gid: number): ITiledTileset | undefined {\r\n\t\tconst frame = resolveTile(this._tileSets, gid);\r\n\t\t\r\n\t\tif(!frame) {\r\n\t\t\treturn undefined;\r\n\t\t}\r\n\r\n\t\treturn this._tileSets[frame!.tilesetId];\r\n\t}\r\n\r\n\t_relativeToAbsolutePath(base: String, relative: String) {\r\n\t\tvar stack = base.split(\"/\"),\r\n\t\t\t\tparts = relative.split(\"/\");\r\n\t\tstack.pop();\r\n\t\tfor (var i=0; i<parts.length; i++) {\r\n\t\t\t\tif (parts[i] == \".\")\r\n\t\t\t\t\t\tcontinue;\r\n\t\t\t\tif (parts[i] == \"..\")\r\n\t\t\t\t\t\tstack.pop();\r\n\t\t\t\telse\r\n\t\t\t\t\t\tstack.push(parts[i]);\r\n\t\t}\r\n\r\n\t\t//Remove trailing dot\r\n\t\tif (stack[0] == '.')\r\n\t\t{\r\n\t\t\tstack.shift();\r\n\t\t}\r\n\t\t\r\n\t\treturn stack.join(\"/\");\r\n\t}\r\n\r\n\t_cropTile(set: ITiledTileset, tile: ITiledTile, texture: Texture) {\r\n\t\t\r\n\t\tconst colls = set.columns!;\r\n\t\tconst rows = set.tilecount! / colls;\r\n\t\tconst margin = set.margin! || 0;\r\n\t\tconst space = set.spacing! || 0;\r\n\t\tconst xId = tile.id % colls;\r\n\t\tconst yId = tile.id / colls | 0;\r\n\r\n\t\ttexture = new Texture(texture.baseTexture, new Rectangle(\r\n\t\t\tmargin + xId * (set.tilewidth! + space),\r\n\t\t\tmargin + yId * (set.tileheight! + space),\r\n\t\t\tset.tileheight, set.tilewidth\r\n\t\t));\r\n\r\n\t\tthis._sheet.addTexture(texture, `${tile.image}_${tile.tilesetId}:${tile.id}`);\r\n\r\n\t\treturn texture;\r\n\t}\r\n\r\n\t_tryLoadTexture(url: string, tile: ITiledTile) {\r\n\t\t// @ts-ignore\r\n\t\tconst res = new ImageResource(url, {\r\n\t\t\tautoLoad: false,\r\n\t\t\tcrossorigin: 'anonymous',\r\n\t\t});\r\n\r\n\t\tconst texture = new Texture(new BaseTexture(res));\r\n\t\tTexture.addToCache(texture, url);\r\n\r\n\t\tthis._loadQueue++;\r\n\r\n\t\tres.load()\r\n\t\t\t.then(() => {\r\n\t\t\t\ttexture.emit('loaded');\r\n\t\t\t})\r\n\t\t\t.catch((e: any)=>{\r\n\t\t\t\tconsole.warn(`Tile set image loading error!`,tile);\r\n\t\t\t})\r\n\t\t\t.finally(() => {\r\n\t\t\t\tthis._loadQueue--;\r\n\t\t\t\tif (this._loadQueue === 0) {\r\n\t\t\t\t\tthis.emit('loaded');\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\treturn texture;\r\n\t}\r\n\r\n\tget loaded() {\r\n\t\treturn this._loadQueue <= 0;\r\n\t}\r\n}\r\n","import { TiledContainer } from \"./TiledContainer\";\r\nimport { TilesetManager } from \"../tools/TilesetManagers\";\r\n\r\nexport class TiledMapContainer extends TiledContainer {\r\n\tpublic tileSet?: TilesetManager;\r\n}","import { Spritesheet } from '@pixi/spritesheet';\r\nimport { ILoaderResource, Loader } from '@pixi/loaders';\r\nimport { TiledContainer } from '../objects/TiledContainer';\r\nimport { Config, LayerBuildersMap } from '../Config';\r\n\r\nimport { MultiSpritesheet } from './TiledMultiSheet';\r\nimport { ITiledMap } from '../ITiledMap';\r\nimport { TilesetManager } from './TilesetManagers';\r\nimport { TiledMapContainer } from '../objects/TiledMapContainer';\r\n\r\n//inject new field in resources\r\ndeclare module GlobalMixins {\r\n\texport interface ILoaderResource {\r\n\t\tstage?: TiledContainer;\r\n\t}\r\n}\r\n\r\ntype tValidSheet = Spritesheet | MultiSpritesheet;\r\nlet showHello: boolean = true;\r\n\r\nexport function CreateStage(\r\n\tsheet: tValidSheet | undefined,\r\n\t_data: ITiledMap,\r\n\tbaseUrl: string = '',\r\n): TiledMapContainer | undefined {\r\n\r\n\tif (showHello) {\r\n\t\tconsole.log('[TILED] Importer!\\neXponenta {rondo.devil[a]gmail.com}');\r\n\t\tshowHello = false;\r\n\t}\r\n\r\n\tconst useDisplay: boolean = false;\r\n\tconst stage = new TiledMapContainer();\r\n\r\n\tstage.layerHeight = _data.height;\r\n\tstage.layerWidth = _data.width;\r\n\tstage.source = _data;\r\n\r\n\tstage.tileSet = new TilesetManager(_data.tilesets, sheet);\r\n\tstage.tileSet.baseUrl = baseUrl;\r\n\r\n\tif (_data.layers) {\r\n\t\tlet zOrder = 0; //_data.layers.length;\r\n\r\n\t\tif (useDisplay) {\r\n\t\t\t_data.layers = _data.layers.reverse();\r\n\t\t}\r\n\r\n\t\tfor (let layer of _data.layers) {\r\n\t\t\tconst builder = LayerBuildersMap[layer.type];\r\n\r\n\t\t\tif (!builder) {\r\n\t\t\t\tconsole.warn(`[TILED] Importer can't support ${layer.type} layer type!`);\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\r\n\t\t\tconst pixiLayer = builder.Build(layer, stage.tileSet, zOrder, stage);\r\n\r\n\t\t\tif (!pixiLayer) {\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\r\n\t\t\tzOrder++;\r\n\t\t\tstage.layers = {\r\n\t\t\t\t[layer.name]: pixiLayer,\r\n\t\t\t};\r\n\r\n\t\t\tstage.addChild(pixiLayer);\r\n\t\t}\r\n\t}\r\n\r\n\treturn stage;\r\n}\r\n\r\nexport const Parser = {\r\n\tParse(res: ILoaderResource, next: Function) {\r\n\t\tconst data = res.data;\r\n\t\t//validate\r\n\t\tif (!data || data.type != 'map') {\r\n\t\t\tnext();\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tconst cropName = new RegExp(/^.*[\\\\\\/]/);\r\n\t\tlet baseUrl = res.url.replace((this as any).baseUrl, '');\r\n\t\tbaseUrl = baseUrl.match(cropName)![0];\r\n\r\n\t\tconst tilesetsToLoad = [];\r\n\t\tfor (let  tilesetIndex = 0; tilesetIndex < data.tilesets.length; tilesetIndex++)\r\n\t\t{\r\n\t\t\tconst tileset = data.tilesets[tilesetIndex];\r\n\t\t\tif (tileset.source !== undefined)\r\n\t\t\t{\r\n\t\t\t\ttilesetsToLoad.push(tileset);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tconst _tryCreateStage = function()\r\n\t\t{\r\n\t\t\tconst stage = CreateStage(<any>res.textures!, data, baseUrl);\r\n\r\n\t\t\tif (!stage) {\r\n\t\t\t\tnext();\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tstage.name = res.url.replace(cropName, '').split('.')[0];\r\n\t\t\t//@ts-ignore\r\n\t\t\tres.stage = stage;\r\n\r\n\t\t\tif (stage.tileSet!.loaded) {\r\n\t\t\t\tnext();\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tstage.tileSet!.once('loaded', () => next());\r\n\t\t}\r\n\r\n\t\tif (tilesetsToLoad.length > 0)\r\n\t\t{\r\n\t\t\tconst loader = new Loader();\r\n\t\t\tfor (let tilesetIndex = 0; tilesetIndex < tilesetsToLoad.length; tilesetIndex++)\r\n\t\t\t{\r\n\t\t\t\tloader.add(baseUrl + tilesetsToLoad[tilesetIndex].source);\r\n\t\t\t}\r\n\t\t\tloader.load(()=>{\r\n\t\t\t\tObject.keys(loader.resources).forEach(resourcePath => {\r\n\t\t\t\t\tlet tilesetResource = loader.resources[resourcePath];\r\n\t\t\t\t\tlet resourceFileName =  resourcePath.replace(cropName, '');\r\n\t\t\t\t\tfor (let  tilesetIndex = 0; tilesetIndex < data.tilesets.length; tilesetIndex++)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tconst tileset = data.tilesets[tilesetIndex];\r\n\t\t\t\t\t\tif (tileset.source === resourceFileName)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tObject.assign(tileset, tilesetResource.data);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t\t_tryCreateStage();\r\n\t\t\t});\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\t_tryCreateStage();\r\n\t\t}\r\n\t},\r\n\r\n\tuse(res: ILoaderResource, next: Function) {\r\n\t\tParser.Parse.call(this, res, next);\r\n\t},\r\n\r\n\tadd() {\r\n\t\tconsole.log('[TILED] middleware registered!');\r\n\t},\r\n};\r\n","import { DisplayObject, Container } from \"@pixi/display\";\r\nimport { Matrix } from \"@pixi/math\";\r\n\r\n\r\nexport default function (container: typeof Container) {\r\n\r\n\tif (!container)\r\n\t\tthrow new Error(\"Cant't find Container in package!\");\r\n\r\n\t/**\r\n\t * @mixes\r\n\t * MIXIN FROM pixiv5-tiled\r\n\t * Get child by path\r\n\t */\r\n\r\n\tObject.assign(container.prototype,\r\n\t\t{\r\n\t\t\tgetChildByPath: function <T extends DisplayObject>(path: string) {\r\n\t\t\t\tconst _this = <Container> <any> this;\r\n\t\t\t\t\r\n\t\t\t\tif (!_this.children || _this.children.length == 0)\r\n\t\t\t\t\treturn undefined;\r\n\r\n\t\t\t\tlet result: DisplayObject | undefined = _this;\r\n\r\n\t\t\t\tconst split = path.split(\"/\");\r\n\t\t\t\tconst isIndex = new RegExp(\"(?:{{0})-?d+(?=})\");\r\n\r\n\t\t\t\tfor (const p of split) {\r\n\t\t\t\t\t//@ts-ignore\r\n\t\t\t\t\tif (result == undefined || !(result.children)) {\r\n\t\t\t\t\t\tresult = undefined;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif (p.trim().length == 0) continue;\r\n\r\n\t\t\t\t\t// find by index\r\n\t\t\t\t\t//@ts-ignore\r\n\t\t\t\t\tconst ch = result.children;\r\n\t\t\t\t\tconst mathes = p.match(isIndex);\r\n\t\t\t\t\tif (mathes) {\r\n\t\t\t\t\t\tlet index = parseInt(mathes[0]);\r\n\t\t\t\t\t\tif (index < 0) {\r\n\t\t\t\t\t\t\tindex += ch.length;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif (index >= ch.length) {\r\n\t\t\t\t\t\t\tresult = undefined;\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tresult = ch[index];\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t//default by name\r\n\t\t\t\t\tresult = (result as any).getChildByName(p);\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn result as T;\r\n\t\t\t},\r\n\r\n\t\t\taddGlobalChild: function (...child: DisplayObject[]) {\r\n\t\t\t\tconst _this = <Container> <any> this;\r\n\t\t\t\t//TODO: better to convert global position to current matrix\r\n\t\t\t\t_this.transform.updateLocalTransform();\r\n\t\t\t\t\r\n\t\t\t\tconst loc = new Matrix();\r\n\t\t\t\tconst invert = _this.transform.localTransform.clone().invert();\r\n\t\t\t\t\r\n\t\t\t\tfor (let i = 0; i < child.length; i++) {\r\n\r\n\t\t\t\t\tconst newChild = child[i];\r\n\t\t\t\t\tnewChild.transform.updateLocalTransform();\r\n\t\t\t\t\tloc.copyFrom(invert);\r\n\t\t\t\t\tloc.append(newChild.localTransform);\r\n\t\t\t\t\tchild[i].transform.setFromMatrix(loc);\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn _this.addChild(...child);\r\n\r\n\t\t\t}\r\n\t\t});\r\n}\r\n","import { DisplayObject } from '@pixi/display';\r\n\r\nexport default function(displayObject: typeof DisplayObject) {\r\n\r\n\tif(!displayObject)\r\n\t\tthrow new Error(\"Cant't find DisplayObject in package!\");\r\n\t\r\n\t(<any>displayObject.prototype).replaceWithTransform = function(from: any) {\r\n        from.updateTransform();\r\n\r\n        if(from.parent){\r\n\t\t\tfrom.parent.addChildAt(this, from.parent.getChildIndex(from));\r\n\t\t}\r\n\r\n\t\tthis.pivot.copyFrom(from.pivot);        \r\n        this.position.copyFrom(from.position);\r\n\t\tthis.scale.copyFrom(from.scale);\r\n\t\tthis.rotation = from.rotation;\r\n\r\n        this.updateTransform();\r\n    }\r\n}","import { EventEmitter } from '@pixi/utils';\r\n\r\nexport default function(eventEmitter: typeof EventEmitter) {\r\n\tif(!eventEmitter)\r\n\t\tthrow new Error(\"Cant't find utils in package!\");\r\n\r\n    (<any> eventEmitter.prototype).onceAsync = function(event: string, context? : any) : Promise<any> {\r\n        return new Promise((res)=>{\r\n            this.once(event, res, context);\r\n        })\r\n    }\r\n}","import { DisplayObject, Container } from '@pixi/display';\r\nimport { EventEmitter } from '@pixi/utils';\r\n\r\n\r\nimport container from \"./ContainerExt\";\r\nimport display from \"./DisplayExt\";\r\nimport emitter from \"./EventEmitterExt\";\r\n \r\nexport function InjectMixins(pixiPackage? : any) {\r\n    if (pixiPackage) {\r\n        console.log('Deprication. Mixins attached automatically')\r\n    }\r\n\r\n    container(Container);\r\n    display(DisplayObject);\r\n    emitter(EventEmitter);\r\n}\r\n","import { ITiledLayer } from '../ITiledMap';\r\nimport { _prepareProperties, ApplyMeta } from '../tools/Utils';\r\nimport { TiledContainer} from './../objects/TiledContainer';\r\nimport { TilesetManager } from '../tools/TilesetManagers';\r\n\r\nexport interface ILayerBuilder {\r\n\tBuild(meta: ITiledLayer, tileset: TilesetManager, ...args: any[]): TiledContainer | undefined;\r\n};\r\n\r\nexport const LayerBuilder = {\r\n\tBuild(layer: ITiledLayer, tileset: TilesetManager, zOrder = 0): TiledContainer | undefined {\r\n\t\t_prepareProperties(layer);\r\n\r\n\t\tconst props = layer.parsedProps;\r\n\r\n\t\tif (props.ignore || props.ignoreLoad) {\r\n\t\t\tconsole.log('[TILED] layer ignored:' + layer.name);\r\n\t\t\treturn undefined;\r\n\t\t}\r\n\r\n\t\tconst layerObject: TiledContainer = new TiledContainer();\r\n\r\n\t\tlayerObject.tiledId = layer.id;\r\n\t\tlayerObject.name = layer.name;\r\n\t\tlayerObject.visible = layer.visible;\r\n\r\n\t\tlayerObject.position.set(layer.x, layer.y);\r\n\t\tlayerObject.alpha = layer.opacity || 1;\r\n\r\n\t\tApplyMeta(layer, layerObject);\r\n\t\treturn layerObject;\r\n\t},\r\n};\r\n","import { ITiledLayer, ITiledImageLayer, ITiledObjectLayer, ITiledSprite, ITiledObject } from '../ITiledMap';\r\nimport { TiledContainer } from '../objects/TiledContainer';\r\nimport { LayerBuilder } from './LayerBuilder';\r\nimport { TilesetManager } from '../tools/TilesetManagers';\r\nimport { _prepareProperties } from '../tools/Utils';\r\n\r\nimport * as SB from '../builders/SpriteBuilder';\r\nimport * as TB from '../builders/TextBuilder';\r\nimport * as CB from '../builders/ContainerBuilder';\r\n\r\nimport { TiledSprite } from '../objects/TiledSprite';\r\nimport { TiledObjectType, Objectype } from '../tools/TiledObjectType';\r\n\r\nexport const ObjectLayerBuilder = {\r\n\t__gen: <Record<TiledObjectType, (...args: any[]) => TiledContainer | TiledContainer>>{\r\n\t\t[TiledObjectType.IMAGE](meta: ITiledObject, tileset: TilesetManager) {\r\n\t\t\tconst smeta = meta as ITiledSprite;\r\n\t\t\tconst frame = smeta.image ? tileset.getTileByTile(smeta.image!) : tileset.getTileByGid(smeta.gid);\r\n\r\n\t\t\tsmeta.image = frame;\r\n\r\n\t\t\tconst sprite = SB.Build(smeta) as TiledSprite;\r\n\r\n\t\t\tif (smeta.fromImageLayer && frame!.lazyLoad) {\r\n\t\t\t\tframe!.texture.once('loaded', () => {\r\n\t\t\t\t\tsprite.scale.set(1);\r\n\t\t\t\t});\r\n\t\t\t}\r\n\r\n\t\t\tif (smeta.fromImageLayer) {\r\n\t\t\t\tsprite.anchor.set(0);\r\n\t\t\t}\r\n\r\n\t\t\treturn (sprite as any) as TiledContainer;\r\n\t\t},\r\n\t\t[TiledObjectType.TEXT](meta: ITiledObject, tileset: TilesetManager) {\r\n\t\t\treturn TB.Build(meta);\r\n\t\t},\r\n\t\t[TiledObjectType.DEFAULT](meta: ITiledObject, tileset: TilesetManager) {\r\n\t\t\treturn CB.Build(meta);\r\n\t\t},\r\n\t},\r\n\r\n\tBuild(layer: ITiledLayer, tileset: TilesetManager, zOrder = 0): TiledContainer | undefined {\r\n\t\tconst objLayer = layer as ITiledObjectLayer;\r\n\t\tconst layerContatiner = LayerBuilder.Build(layer, tileset, zOrder);\r\n\r\n\t\tif (!layerContatiner) {\r\n\t\t\treturn undefined;\r\n\t\t}\r\n\r\n\t\tif (layer.type === 'imagelayer') {\r\n\t\t\tif (!this.__convertLayer(layer as ITiledImageLayer)) {\r\n\t\t\t\treturn undefined;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (!objLayer.objects || !objLayer.objects.length) {\r\n\t\t\treturn layerContatiner;\r\n\t\t}\r\n\r\n\t\tconst objects = objLayer.objects;\r\n\r\n\t\tlet localZIndex = 0;\r\n\r\n\t\tfor (let objMeta of objects) {\r\n\t\t\t_prepareProperties(objMeta);\r\n\r\n\t\t\tconst type = Objectype(objMeta);\r\n\t\t\tconst method = this.__gen[type] || this.__gen[TiledObjectType.DEFAULT];\r\n\t\t\tconst obj = method!.call(this, objMeta, tileset);\r\n\r\n\t\t\tif (!obj) {\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\r\n\t\t\t/*\r\n\t\t\tif (Config.usePixiDisplay) {\r\n\t\t\t\t(obj as any).parentGroup = (layerContatiner as any).group;\r\n\t\t\t\tstage.addChildAt(pixiObject, localZIndex);\r\n\t\t\t} else {\r\n\t\t\t\t*/\r\n\r\n\t\t\tlayerContatiner.addChildAt(obj, localZIndex);\r\n\t\t\t//}\r\n\r\n\t\t\tlocalZIndex++;\r\n\t\t}\r\n\r\n\t\treturn layerContatiner;\r\n\t},\r\n\r\n\t__convertLayer(imageLayer: ITiledImageLayer) {\r\n\t\tif (!imageLayer.image) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\t(imageLayer as any).objects = [\r\n\t\t\t{\r\n\t\t\t\timage: {\r\n\t\t\t\t\timage: imageLayer.image,\r\n\t\t\t\t},\r\n\t\t\t\t//imageLayer can't has gid ID\r\n\r\n\t\t\t\tgid: -1,\r\n\t\t\t\tname: imageLayer.name,\r\n\t\t\t\tx: imageLayer.x + imageLayer.offsetx,\r\n\t\t\t\ty: imageLayer.y + imageLayer.offsety,\r\n\r\n\t\t\t\tfromImageLayer: true,\r\n\t\t\t\tproperties: imageLayer.properties,\r\n\t\t\t\tparsedProps: imageLayer.parsedProps,\r\n\t\t\t} as ITiledSprite,\r\n\t\t];\r\n\r\n\t\treturn true;\r\n\t},\r\n};\r\n","import { ITiledLayer, ITiledTileLayer, ITiledMap, ITiledTile, ITiledSprite } from '../ITiledMap';\r\nimport { TilesetManager } from '../tools/TilesetManagers';\r\nimport { LayerBuilder } from './LayerBuilder';\r\nimport { TiledMapContainer } from '../objects/TiledMapContainer';\r\nimport { TiledSprite } from '../objects/TiledSprite';\r\nimport { Config } from '../Config';\r\nimport { TiledContainer } from '../index';\r\nimport { TileAnimator } from '../objects/TiledAnimator';\r\n\r\nexport const TiledLayerBuilder = {\r\n\tBuild(layer: ITiledLayer, set: TilesetManager, zOrder: number = 0, tileMap: TiledMapContainer) {\r\n\t\tconst tiledLayer = layer as ITiledTileLayer;\r\n\t\tconst tileMapSource: ITiledMap = tileMap.source! as ITiledMap;\r\n\t\tconst layerContatiner = LayerBuilder.Build(layer, set, zOrder) as TiledContainer & {animators: Map<string, TileAnimator> };\r\n\r\n\t\tif(!layerContatiner) {\r\n\t\t\treturn undefined;\r\n\t\t}\r\n\r\n\t\tconst data = this.__decodeData(tiledLayer);\r\n\t\tconst { width, height } = layer;\r\n\t\tconst { tileheight, tilewidth } = tileMapSource;\r\n\r\n\t\tconst genTile = (x: number, y: number, gid: number)=>{\r\n\t\t\tconst tile = set.getTileByGid(gid);\r\n\r\n\t\t\tconst s = new TiledSprite({\r\n\t\t\t\timage: tile,\r\n\t\t\t\tfromImageLayer: false,\r\n\t\t\t\tgid: gid,\r\n\t\t\t\tanchor: {x: 0, y: 0}\r\n\t\t\t} as ITiledSprite);\r\n\t\t\t\r\n\t\t\ts.x = x * tilewidth;\r\n\t\t\ts.y = y * tileheight - (tile!.imageheight === undefined ? 0 : tile!.imageheight - tileheight);\r\n\t\t\ts.roundPixels = Config.roundPixels;\r\n\r\n\t\t\tif(tile && tile.animation) {\r\n\t\t\t\tconst animators = layerContatiner.animators || new Map();\r\n\t\t\t\tconst animId = tile.tilesetId + \"_\" + tile.id;\r\n\r\n\t\t\t\tlet animator = animators.get(animId);\r\n\t\t\t\tif(!animator) {\r\n\t\t\t\t\tanimator = new TileAnimator(tile);\r\n\t\t\t\t\tanimators.set(animId, animator);\r\n\t\t\t\t}\r\n\r\n\t\t\t\ts.anim = animator;\r\n\t\t\t\tanimator.anim.play();\r\n\t\t\t}\r\n\r\n\t\t\treturn s;\r\n\t\t}\r\n\r\n\t\tfor (let y = 0; y < height; y++) {\r\n\t\t\tfor (let x = 0; x < width; x++) {\r\n\t\t\t\tconst index = x + y * width;\r\n\t\t\t\tconst gid = data[index];\r\n\r\n\t\t\t\t// skip gid 0,\r\n\t\t\t\tif(!gid) {\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlayerContatiner.addChild(genTile(x,y,data[index]));\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn layerContatiner;\r\n\t},\r\n\r\n\t__decodeData(layer: ITiledTileLayer): number[] {\r\n\t\treturn layer.data;\r\n\t},\r\n};\r\n","declare global {\r\n\tinterface Window {\r\n\t\tPIXI: any;\r\n\t}\r\n}\r\n\r\nconst VERSION = '__VERSION__';\r\n\r\nimport * as ContainerBuilder from './builders/ContainerBuilder';\r\nimport * as SpriteBuilder from './builders/SpriteBuilder';\r\nimport * as TextBuilder from './builders/TextBuilder';\r\n\r\nimport { Parser, CreateStage } from './tools/TiledObjectParser';\r\nimport { Config, ITiledProps, LayerBuildersMap } from './Config';\r\nimport { TiledContainer } from './objects/TiledContainer';\r\nimport { InjectMixins } from './pixi-utils';\r\n\r\n// prevent circular\r\nObject.assign(LayerBuildersMap, {\r\n\ttilelayer: TiledLayerBuilder,\r\n\tobjectgroup: ObjectLayerBuilder,\r\n\timagelayer: ObjectLayerBuilder,\r\n\tgroup: undefined,\r\n});\r\n\r\nexport function Inject(pixiPack = window.PIXI, props: Partial<ITiledProps> | undefined = undefined) {\r\n\tif (!pixiPack) {\r\n\t\tconsole.warn(\r\n\t\t\t\"Auto injection works only with globals scoped PIXI, not in modules\\nuse 'Loader.registerPlugin(Parser)' otherwith\",\r\n\t\t);\r\n\t\treturn;\r\n\t}\r\n\r\n\tif (props) {\r\n\t\tObject.assign(Config, props);\r\n\t}\r\n\r\n\tInjectMixins(pixiPack);\r\n\r\n\tif (Config.injectMiddleware) {\r\n\t\tpixiPack.Loader.registerPlugin(Parser);\r\n\t}\r\n}\r\n\r\nimport * as Primitives from './objects/TiledPrimitives';\r\nimport { MultiSpritesheet } from './tools/TiledMultiSheet';\r\nimport { ObjectLayerBuilder } from './layers/ObjectsLayerBuilder';\r\nimport { TiledLayerBuilder } from './layers/TiledLayerBuilder';\r\nexport { Primitives };\r\nexport { Parser };\r\nexport { CreateStage };\r\nexport { Config };\r\nexport { ContainerBuilder };\r\nexport { SpriteBuilder };\r\nexport { TextBuilder };\r\nexport { TiledContainer };\r\nexport { MultiSpritesheet };\r\nexport { VERSION };\r\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AC7CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;ACXA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,sIACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oOACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,uJACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACzKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAehKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+GACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AC7EA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AC5BA;AACA;AACA;AACA;AACA;;;;;;;;ACFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AC7FA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;ACtCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,ovLA;AACA;;ACKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;ACrJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AC/EA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AClBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;ACFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;ACl}