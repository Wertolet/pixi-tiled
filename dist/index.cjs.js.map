{"version":3,"file":"index.cjs.js","sources":["../src/TiledContainer.ts","../src/Config.ts","../src/Utils.ts","../src/TiledPrimitives.ts","../src/TiledSprite.ts","../src/ContainerBuilder.ts","../src/SpriteBuilder.ts","../src/TextBuilder.ts","../src/TiledMultiSheet.ts","../src/TilesetManagers.ts","../src/TiledObjectParser.ts","../src/pixi-utils/index.ts","../src/pixi-utils/ContainerExt.ts","../src/pixi-utils/DisplayExt.ts","../src/pixi-utils/EventEmitterExt.ts","../src/LayerBuilder.ts","../src/ObjectsLayerBuilder.ts","../src/index.ts"],"sourcesContent":["import { Container, Text } from \"pixi.js\"\r\nimport { ITiledPtimitive } from './TiledPrimitives';\r\nimport { IParsedProps, ITiledLayer, ITiledObject, ITiledFrame, ITiledMap } from \"./ITiledMap\";\r\n\r\nexport class TiledContainer extends Container {\r\n\tlayerHeight: number = 0;\r\n\tlayerWidth: number = 0;\r\n\ttext?: Text;\r\n\tprimitive?: ITiledPtimitive;\r\n\ttiledId?: number;\r\n\tproperties?: IParsedProps;\r\n\tlayers?: {[key: string]: Container};\r\n\tsource?: ITiledLayer | ITiledObject | ITiledMap;\r\n\ttileFrame?: ITiledFrame;\r\n}\r\n","import { Point } from \"pixi.js\";\r\nimport { ILayerBuilder } from \"./LayerBuilder\";\r\n\r\nexport interface ITiledProps {\r\n\tdefSpriteAnchor?: PIXI.Point;\r\n\tdebugContainers?: boolean;\r\n\tusePixiDisplay?: boolean;\r\n\troundFontAlpha?: boolean;\r\n\tinjectMiddleware?: boolean;\r\n}\r\n\r\nexport const Config: ITiledProps = {\r\n\tdefSpriteAnchor: new Point(0, 1),\r\n\tdebugContainers: false,\r\n\tusePixiDisplay: false,\r\n\troundFontAlpha: false,\r\n\tinjectMiddleware: true\r\n};\r\n\r\nexport const LayerBuildersMap: { [key: string]: ILayerBuilder | undefined } = {};\r\n","import { ITiledTileset, ITiledMap, IParsedProps, ITiledLayer, ITiledObject, ITiledSprite } from \"./ITiledMap\";\r\n\r\nexport function HexStringToHexInt(value: string | number): number {\r\n\tif (!value) return 0;\r\n\r\n\tif (typeof value == \"number\") return value;\r\n\r\n\tvalue = value.length > 7 ? value.substr(3, 6) : value.substr(1, 6);\r\n\r\n\ttry {\r\n\t\treturn parseInt(value, 16);\r\n\t} catch (e) {\r\n\t\tconsole.warn(\"Color parse error:\", e.message);\r\n\t\treturn 0;\r\n\t}\r\n}\r\n\r\nexport function HexStringToAlpha(value: string | number): number {\r\n\tif (!value) return 1;\r\n\tif (typeof value == \"number\") return value;\r\n\r\n\tif (value.length <= 7) return 1;\r\n\r\n\ttry {\r\n\t\treturn parseInt(value.substr(1, 2), 16) / 255.0;\r\n\t} catch (e) {\r\n\t\tconsole.warn(\"Alpha parse error:\", e.message);\r\n\t\treturn 1;\r\n\t}\r\n}\r\n\r\nexport enum TiledObjectType {\r\n\tDEFAULT,\r\n\tPOINT,\r\n\tPOLYGON,\r\n\tPOLYLINE,\r\n\tELLIPSE,\r\n\tTEXT,\r\n\tIMAGE\r\n}\r\n\r\n// https://doc.mapeditor.org/en/stable/reference/json-map-format/\r\n\r\nexport function Objectype(meta: any): TiledObjectType {\r\n\tif (meta.properties && meta.properties.container)\r\n\t\treturn TiledObjectType.DEFAULT;\r\n\tif (meta.gid || meta.image) return TiledObjectType.IMAGE;\r\n\tif (meta.text != undefined) return TiledObjectType.TEXT;\r\n\tif (meta.point) return TiledObjectType.POINT;\r\n\tif (meta.polygon) return TiledObjectType.POLYGON;\r\n\tif (meta.polyline) return TiledObjectType.POLYLINE;\r\n\tif (meta.ellipse) return TiledObjectType.ELLIPSE;\r\n\r\n\treturn TiledObjectType.DEFAULT;\r\n}\r\n\r\nexport function resolveImageUrl(\r\n\ttilesets: ITiledTileset[],\r\n\tbaseUrl: string,\r\n\tgid: number\r\n) {\r\n\tlet tileSet = undefined; //_data.tilesets[0];\r\n\tlet tilesetId = 0;\r\n\r\n\tfor (let i = 0; i < tilesets.length; i++) {\r\n\t\tif (tilesets[i].firstgid <= gid) {\r\n\t\t\ttileSet = tilesets[i];\r\n\t\t\ttilesetId = i;\r\n\t\t\tbreak;\r\n\t\t}\r\n\t}\r\n\r\n\tif (!tileSet) {\r\n\t\tconsole.error(\"Image with gid:\" + gid + \" not found!\");\r\n\t\treturn null;\r\n\t}\r\n\r\n\tconst realGid = gid - tileSet.firstgid;\r\n\r\n\tlet find = tileSet.tiles!.filter(obj => obj.id == realGid)[0];\r\n\tlet img = Object.assign({}, find, {tilesetId});\r\n\r\n\tif (!img) {\r\n\t\tconsole.error(\"Load res MISSED gid:\" + realGid);\r\n\t\treturn null;\r\n\t}\r\n\r\n\treturn img;\r\n}\r\n\r\n\r\nexport function _prepareProperties(layer: ITiledMap | ITiledLayer | ITiledObject) {\r\n\tlet props: IParsedProps = {};\r\n\r\n\tif (layer.properties) {\r\n\t\tif (layer.properties instanceof Array) {\r\n\t\t\tfor (var p of layer.properties) {\r\n\t\t\t\tlet val = p.value;\r\n\t\t\t\tif (p.type == \"color\") {\r\n\t\t\t\t\tval = HexStringToHexInt(val as string);\r\n\t\t\t\t}\r\n\t\t\t\tprops[p.name] = val;\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\t// old tiled format\r\n\t\t\tprops = layer.properties;\r\n\t\t}\r\n\t}\r\n\r\n\tconst spriteObject = layer as ITiledSprite;\r\n\r\n\t// http://doc.mapeditor.org/en/stable/reference/tmx-map-format/#tile-flipping\r\n\tif (spriteObject.gid > 0) {\r\n\t\tconst gid = spriteObject.gid;\r\n\r\n\t\tconst vFlip = !!(gid & 0x40000000);\r\n\t\tconst hFlip = !!(gid & 0x80000000);\r\n\t\tconst dFlip = !!(gid & 0x20000000);\r\n\r\n\t\tprops[\"vFlip\"] = vFlip;\r\n\t\tprops[\"hFlip\"] = hFlip;\r\n\t\tprops[\"dFlip\"] = dFlip;\r\n\r\n\t\tspriteObject.vFlip = vFlip;\r\n\t\tspriteObject.hFlip = hFlip;\r\n\r\n\t\tconst realGid = gid & ~(0x40000000 | 0x80000000 | 0x20000000);\r\n\t\tspriteObject.gid = realGid;\r\n\t}\r\n\r\n\tlayer.parsedProps = props;\r\n}\r\n","import { Rectangle, Point, Polygon, Ellipse } from \"pixi.js\";\r\nimport * as Utils from \"./Utils\";\r\nimport { ITiledObject } from \"./ITiledMap\";\r\n\r\nexport interface ITiledPtimitive {\r\n\tname: string;\r\n\ttypes: Array<string>;\r\n\tvisible: boolean;\r\n}\r\n\r\nexport class TiledRect extends Rectangle implements ITiledPtimitive {\r\n\tname: string = \"\";\r\n\ttypes: string[] = [];\r\n\tvisible: boolean = true;\r\n}\r\n\r\nexport class TiledPoint extends Point implements ITiledPtimitive {\r\n\tname: string = \"\";\r\n\ttypes: string[] = [];\r\n\tvisible: boolean = true;\r\n\r\n\tconstructor(x?: number, y?: number) {\r\n\t\tsuper(x, y);\r\n\t}\r\n}\r\n\r\nexport class TiledPolygon extends Polygon implements ITiledPtimitive {\r\n\tname: string = \"\";\r\n\ttypes: string[] = [];\r\n\tvisible: boolean = true;\r\n\r\n\tprivate _x: number = 0;\r\n\tprivate _y: number = 0;\r\n\r\n\tconstructor(points: Point[]) {\r\n\t\tsuper(points);\r\n\t}\r\n\r\n\tset x(sX: number) {\r\n\t\tconst delta = sX - this._x;\r\n\t\tthis._x = sX;\r\n\r\n\t\tfor (let xIndex = 0; xIndex < this.points.length; xIndex += 2) {\r\n\t\t\tthis.points[xIndex] += delta;\r\n\t\t}\r\n\t}\r\n\r\n\tset y(sY: number) {\r\n\t\tconst delta = sY - this._y;\r\n\t\tthis._y = sY;\r\n\r\n\t\tfor (let yIndex = 1; yIndex < this.points.length; yIndex += 2) {\r\n\t\t\tthis.points[yIndex] += delta;\r\n\t\t}\r\n\t}\r\n\r\n\tget x(): number {\r\n\t\treturn this._x;\r\n\t}\r\n\r\n\tget y(): number {\r\n\t\treturn this._y;\r\n\t}\r\n\r\n\tgetBounds(): Rectangle {\r\n\t\tlet rect = new Rectangle();\r\n\r\n\t\tlet maxX: number = this._x;\r\n\t\tlet maxY: number = this._y;\r\n\r\n\t\tfor (let index = 0; index < this.points.length; index += 2) {\r\n\t\t\tconst px = this.points[index];\r\n\t\t\tconst py = this.points[index + 1];\r\n\r\n\t\t\trect.x = px < rect.x ? px : rect.x;\r\n\t\t\trect.y = py < rect.y ? py : rect.y;\r\n\r\n\t\t\tmaxX = px > maxX ? px : maxX;\r\n\t\t\tmaxY = py > maxY ? py : maxY;\r\n\t\t}\r\n\r\n\t\trect.width = maxX - rect.x;\r\n\t\trect.height = maxY - rect.y;\r\n\r\n\t\treturn rect;\r\n\t}\r\n\r\n\tget width(): number {\r\n\t\treturn this.getBounds().width;\r\n\t}\r\n\r\n\tget height(): number {\r\n\t\treturn this.getBounds().height;\r\n\t}\r\n\r\n\tset height(h: number) {\r\n\t\tconst factor = h / this.height;\r\n\r\n\t\tfor (let yIndex = 1; yIndex < this.points.length; yIndex += 2) {\r\n\t\t\tconst delta = (this.points[yIndex] - this._y) * factor;\r\n\t\t\tthis.points[yIndex] = this._y + delta;\r\n\t\t}\r\n\t}\r\n\r\n\tset width(w: number) {\r\n\t\tconst factor = w / this.width;\r\n\r\n\t\tfor (let xIndex = 0; xIndex < this.points.length; xIndex += 2) {\r\n\t\t\tconst delta = (this.points[xIndex] - this._x) * factor;\r\n\t\t\tthis.points[xIndex] = this._x + delta;\r\n\t\t}\r\n\t}\r\n}\r\n\r\nexport class TiledPolypine implements ITiledPtimitive {\r\n\tname: string = \"\";\r\n\ttypes: string[] = [];\r\n\tvisible: boolean = true;\r\n\r\n\tpoints: Array<Point> = [];\r\n\r\n\tconstructor(points: Array<Point>) {\r\n\t\tthis.points = points.slice();\r\n\t}\r\n}\r\n\r\nexport class TiledEllipse extends Ellipse implements ITiledPtimitive {\r\n\tname: string = \"\";\r\n\ttypes: string[] = [];\r\n\tvisible: boolean = true;\r\n\r\n\tconstructor(x?: number, y?: number, hw?: number, hh?: number) {\r\n\t\tsuper(x, y, hw, hh);\r\n\t}\r\n}\r\n\r\nexport function BuildPrimitive( meta: ITiledObject ): ITiledPtimitive | undefined {\r\n\t\r\n\tif (!meta) {\r\n\t\treturn;\r\n\t}\r\n\r\n\tlet prim: ITiledPtimitive | undefined = undefined;\r\n\r\n\tconst type: Utils.TiledObjectType = Utils.Objectype(meta);\r\n\r\n\tmeta.x = meta.x || 0;\r\n\tmeta.y = meta.y || 0;\r\n\r\n\tswitch (type) {\r\n\t\tcase Utils.TiledObjectType.ELLIPSE: {\r\n\t\t\tprim = new TiledEllipse(\r\n\t\t\t\tmeta.x + 0.5 * meta.width,\r\n\t\t\t\tmeta.y + 0.5 * meta.height,\r\n\t\t\t\tmeta.width * 0.5,\r\n\t\t\t\tmeta.height * 0.5\r\n\t\t\t);\r\n\t\t\tbreak;\r\n\t\t}\r\n\t\tcase Utils.TiledObjectType.POLYGON: {\r\n\t\t\tconst points = meta.polygon!;\r\n\t\t\tconst poses = points.map(p => {\r\n\t\t\t\treturn new Point(p.x + meta.x, p.y + meta.y);\r\n\t\t\t});\r\n\t\t\t\r\n\t\t\tprim = new TiledPolygon(poses);\r\n\t\t\tbreak;\r\n\t\t}\r\n\t\tcase Utils.TiledObjectType.POLYLINE: {\r\n\t\t\tconst points = meta.polygon!;\r\n\t\t\tconst poses = points.map(p => {\r\n\t\t\t\treturn new Point(p.x + meta.x, p.y + meta.y);\r\n\t\t\t});\r\n\r\n\t\t\tprim = new TiledPolypine(poses);\r\n\t\t\tbreak;\r\n\t\t}\r\n\t\tdefault:\r\n\t\t\tprim = new TiledRect(meta.x, meta.y, meta.width, meta.height);\r\n\t}\r\n\r\n\tprim.types = meta.type ? meta.type.split(\":\") : [];\r\n\tprim.visible = meta.visible;\r\n\tprim.name = meta.name;\r\n\t\r\n\treturn prim;\r\n}\r\n","import { Sprite } from \"pixi.js\";\r\nimport { ITiledTile } from \"./ITiledMap\";\r\n\r\nexport class TiledSprite extends Sprite {\r\n\tpublic tileFrame?: ITiledTile;\r\n}","import { TiledContainer } from \"./TiledContainer\";\r\nimport { Config } from \"./Config\";\r\nimport {\r\n\tSprite,\r\n\tRectangle,\r\n\tTexture,\r\n\tGraphics,\r\n} from \"pixi.js\";\r\n\r\nimport * as Primitives from \"./TiledPrimitives\";\r\nimport { ITiledObject, ITiledLayer } from \"./ITiledMap\";\r\nimport { TiledSprite } from \"./TiledSprite\";\r\n\r\nexport function ApplyMeta(meta: ITiledObject | ITiledLayer, target: TiledContainer) {\r\n\ttarget.name = meta.name;\r\n\ttarget.tiledId = meta.id;\r\n\ttarget.width = meta.width || target.width;\r\n\ttarget.height = meta.height || target.height;\r\n\ttarget.rotation = (((meta as ITiledObject).rotation || 0) * Math.PI) / 180.0;\r\n\r\n\ttarget.x = meta.x || 0;\r\n\ttarget.y = meta.y || 0;\r\n\r\n\ttarget.visible = meta.visible == undefined ? true : meta.visible;\r\n\ttarget.types = meta.type ? meta.type.split(\":\") : [];\r\n\r\n\ttarget.primitive = Primitives.BuildPrimitive(meta as ITiledObject);\r\n\r\n\tconst props = meta.parsedProps;\r\n\r\n\tif (props) {\r\n\t\tif (!isNaN(props.opacity as number)) {\r\n\t\t\ttarget.alpha = Number(props.opacity);\r\n\t\t}\r\n\r\n\t\t//@ts-ignore\r\n\t\tObject.assign(target, props);\r\n\r\n\t\ttarget.properties = props;\r\n\t}\r\n\r\n\ttarget.source = meta;\r\n\r\n\tif (Config.debugContainers) {\r\n\t\tsetTimeout(() => {\r\n\t\t\tconst rect = new Graphics();\r\n\r\n\t\t\trect.lineStyle(2, 0xff0000, 0.7)\r\n\t\t\t\t.drawRect(target.x, target.y, meta.width, meta.height)\r\n\t\t\t\t.endFill();\r\n\t\t\tif (target instanceof Sprite) {\r\n\t\t\t\trect.y -= target.height;\r\n\t\t\t}\r\n\t\t\ttarget.parent.addChild(rect);\r\n\t\t}, 30);\r\n\t}\r\n}\r\n\r\nexport function Build(meta: ITiledObject): TiledContainer | TiledSprite {\r\n\tconst types: Array<string> = meta.type ? meta.type.split(\":\") : [];\r\n\r\n\tlet container = undefined; // new TiledOG.TiledContainer();\r\n\r\n\tif (types.indexOf(\"mask\") > -1) {\r\n\t\tcontainer = new TiledSprite(Texture.WHITE);\r\n\t} else {\r\n\t\tcontainer = new TiledContainer();\r\n\t}\r\n\r\n\tif (meta.gid) {\r\n\t\tif (container instanceof Sprite) {\r\n\t\t\tcontainer.anchor = Config.defSpriteAnchor as any;\r\n\t\t} else {\r\n\t\t\tcontainer.pivot = Config.defSpriteAnchor as any;\r\n\t\t\tcontainer.hitArea = new Rectangle(0, 0, meta.width, meta.height);\r\n\t\t}\r\n\t}\r\n\r\n\tApplyMeta(meta, container as TiledContainer);\r\n\r\n\treturn container;\r\n}\r\n","import { Config } from \"./Config\";\r\nimport { Sprite, Texture, AnimatedSprite } from \"pixi.js\";\r\nimport * as ContainerBuilder from \"./ContainerBuilder\";\r\nimport * as Primitives from \"./TiledPrimitives\";\r\nimport { ITiledSprite, ITiledObjectLayer } from \"./ITiledMap\";\r\n\r\nexport function Build(meta: ITiledSprite): Sprite {\r\n\t// TODO make load from texture atlass\r\n\tlet sprite;\r\n\t\r\n\tif(meta.image!.animation) {\r\n\t\tsprite = new AnimatedSprite(meta.image!.animation, !!meta.parsedProps.autoUpdate || true);\r\n\t\t\r\n\t\tconst a = sprite as any;\r\n\t\ta.play && (meta.parsedProps.animPlaying) && a.play();\r\n\t\ta.loop = meta.parsedProps.animLoop !== undefined ? meta.parsedProps.animLoop: true;\r\n\t} else {\r\n\t\tsprite = new Sprite( meta.image!.texture || Texture.EMPTY);\r\n\t}\r\n\r\n\t//TODO Set anchor and offsets to center (.5, .5)\r\n\tif (!meta.fromImageLayer) {\r\n\t\tsprite.anchor = Config.defSpriteAnchor!;\r\n\t}\r\n\r\n\t//debugger\r\n\tContainerBuilder.ApplyMeta(meta, sprite as any);\r\n\r\n\tconst obj = meta.image!.objectgroup as ITiledObjectLayer;\r\n\r\n\tif (obj) {\r\n\t\t(sprite as any).primitive = Primitives.BuildPrimitive(obj.objects[0]);\r\n\t}\r\n\r\n\tconst hFlip = meta.hFlip;\r\n\tconst vFlip = meta.vFlip;\r\n\r\n\tif (hFlip) {\r\n\t\tsprite.scale.x *= -1;\r\n\t\tsprite.anchor.x = 1;\r\n\t}\r\n\r\n\tif (vFlip) {\r\n\t\tsprite.scale.y *= -1;\r\n\t\tsprite.anchor.y = 0;\r\n\t}\r\n\r\n\treturn sprite;\r\n}\r\n","import { TiledContainer } from \"./TiledContainer\";\r\nimport { Text, DisplayObject, TextStyle } from \"pixi.js\";\r\nimport { Config } from \"./Config\";\r\nimport * as ContainerBuilder from \"./ContainerBuilder\";\r\nimport * as Utils from \"./Utils\";\r\nimport { ITiledObject } from \"./ITiledMap\";\r\n\r\nexport function Build(meta: ITiledObject): TiledContainer {\r\n\tconst container = new TiledContainer();\r\n\tconst text = meta.text!;\r\n\r\n\tlet pixiText = new Text(text.text, {\r\n\t\twordWrap: text.wrap,\r\n\t\twordWrapWidth: meta.width,\r\n\t\tfill: Utils.HexStringToHexInt(text.color || \"#000000\") || 0x000000,\r\n\t\talign: text.valign || \"top\",\r\n\t\tfontFamily: text.fontfamily || \"sans-serif\",\r\n\t\tfontWeight: text.bold ? \"bold\" : \"normal\",\r\n\t\tfontStyle: text.italic ? \"italic\" : \"normal\",\r\n\t\tfontSize: text.pixelsize || \"16px\"\r\n\t} as TextStyle);\r\n\r\n\tpixiText.name = meta.name + \"_Text\";\r\n\r\n\tpixiText.roundPixels = !!Config.roundFontAlpha;\r\n\r\n\tconst props = meta.parsedProps;\r\n\r\n\t// clear properties\r\n\tmeta.properties = [];\r\n\tmeta.parsedProps = {};\r\n\r\n\tContainerBuilder.ApplyMeta(meta, container);\r\n\tcontainer.pivot.set(0, 0);\r\n\r\n\tswitch (text.halign) {\r\n\t\tcase \"right\":\r\n\t\t\t{\r\n\t\t\t\tpixiText.anchor.x = 1;\r\n\t\t\t\tpixiText.position.x = meta.width;\r\n\t\t\t}\r\n\t\t\tbreak;\r\n\t\tcase \"center\":\r\n\t\t\t{\r\n\t\t\t\tpixiText.anchor.x = 0.5;\r\n\t\t\t\tpixiText.position.x = meta.width * 0.5;\r\n\t\t\t}\r\n\t\t\tbreak;\r\n\t\tdefault:\r\n\t\t\t{\r\n\t\t\t\tpixiText.anchor.x = 0;\r\n\t\t\t\tpixiText.position.x = 0;\r\n\t\t\t}\r\n\t\t\tbreak;\r\n\t}\r\n\r\n\tswitch (text.valign) {\r\n\t\tcase \"bottom\":\r\n\t\t\t{\r\n\t\t\t\tpixiText.anchor.y = 1;\r\n\t\t\t\tpixiText.position.y = meta.height;\r\n\t\t\t}\r\n\t\t\tbreak;\r\n\t\tcase \"center\":\r\n\t\t\t{\r\n\t\t\t\tpixiText.anchor.y = 0.5;\r\n\t\t\t\tpixiText.position.y = meta.height * 0.5;\r\n\t\t\t}\r\n\t\t\tbreak;\r\n\t\tdefault:\r\n\t\t\t{\r\n\t\t\t\tpixiText.anchor.y = 0;\r\n\t\t\t\tpixiText.position.y = 0;\r\n\t\t\t}\r\n\t\t\tbreak;\r\n\t}\r\n\r\n\tif (props) {\r\n\t\tpixiText.style.stroke =\r\n\t\t\tUtils.HexStringToHexInt(props.strokeColor as string) || 0;\r\n\t\tpixiText.style.strokeThickness = props.strokeThickness || 0;\r\n\t\tpixiText.style.padding = props.fontPadding || 0;\r\n\r\n\t\tObject.assign(pixiText, props);\r\n\t}\r\n\r\n\t//_cont.parentGroup = _layer.group;\r\n\tcontainer.addChild(pixiText);\r\n\tcontainer.text = pixiText;\r\n\r\n\tcontainer.properties = props;\r\n\r\n\treturn container;\r\n}","import { Spritesheet, Texture } from \"pixi.js\";\r\n\r\nexport class MultiSpritesheet {\r\n\tsheets: Array<Spritesheet | MultiSpritesheet> = [];\r\n\timages: { [name: string]: Texture } = {};\r\n\r\n\tconstructor(sheets?: Spritesheet[]) {\r\n\t\tif (sheets) {\r\n\t\t\tsheets.forEach(element => {\r\n\t\t\t\tthis.add(element);\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\tadd(sheet?: Spritesheet | MultiSpritesheet) {\r\n\t\tif (!sheet) throw \"Sheet can't be undefined\";\r\n\t\tif (sheet === this) throw \"U can't add self to spritesheet\";\r\n\r\n\t\tthis.sheets.push(sheet);\r\n\t}\r\n\r\n\taddTexture(tex: Texture, id: string) {\r\n\t\tthis.images[id] = tex;\r\n\t}\r\n\r\n\tget textures(): { [name: string]: Texture } {\r\n\t\tlet map: { [name: string]: Texture } = {};\r\n\r\n\t\tfor (const spr of this.sheets) {\r\n\t\t\tObject.assign(map, spr.textures);\r\n\t\t}\r\n\r\n\t\tObject.assign(map, this.images);\r\n\r\n\t\treturn map;\r\n\t}\r\n\r\n\tget animations(): { [name: string]: Texture[] } {\r\n\t\tlet map: { [name: string]: Texture[] } = {};\r\n\r\n\t\tfor (const spr of this.sheets) {\r\n\t\t\t// can be looped\r\n\t\t\tObject.assign(map, spr.animations);\r\n\t\t}\r\n\r\n\t\treturn map;\r\n\t}\r\n}\r\n","import { ITiledTileset, ITiledTile } from './ITiledMap';\r\nimport { MultiSpritesheet } from './TiledMultiSheet';\r\nimport { resolveImageUrl } from './Utils';\r\n\r\nimport { Spritesheet, Texture } from 'pixi.js';\r\n\r\nexport class TilesetManager {\r\n\tprivate _sheet: MultiSpritesheet = new MultiSpritesheet();\r\n\r\n\t/**\r\n\t * @description Base url for all images\r\n\t */\r\n\tpublic baseUrl: string = '';\r\n\r\n\t/**\r\n\t * @description Preload images which not exist in spritesheet\r\n\t */\r\n\tpublic loadUnknowImages: boolean = true;\r\n\r\n\tconstructor(private _tileSets: ITiledTileset[], sheet?: MultiSpritesheet | Spritesheet) {\r\n\t\tif (sheet) {\r\n\t\t\tthis.register(sheet);\r\n\t\t}\r\n\t}\r\n\r\n\tregister(spritesheet: MultiSpritesheet | Spritesheet) {\r\n\t\tthis._sheet.add(spritesheet);\r\n\t}\r\n\r\n\tget spritesheet() {\r\n\t\treturn this._sheet;\r\n\t}\r\n\r\n\tgetTileByGid(gid: number, tryLoad = this.loadUnknowImages): ITiledTile | undefined {\r\n\t\tconst tile = resolveImageUrl(this._tileSets, this.baseUrl, gid);\r\n\t\treturn this.getTileByTile(tile, tryLoad);\r\n\t}\r\n\r\n\tgetTileByTile(tile: ITiledTile | null, tryLoad = this.loadUnknowImages, skipAnim  = false) {\r\n\t\tif (!tile || !tile.image) {\r\n\t\t\treturn undefined;\r\n\t\t}\r\n\t\t\r\n\t\tif(tile.animation && !skipAnim) {\r\n\t\t\tconst ts =this._tileSets[tile.tilesetId!];\r\n\t\t\t\r\n\t\t\ttile.animation.forEach((e)=>{\r\n\t\t\t\te.texture = this.getTileByTile(ts.tiles![e.tileid], tryLoad, true)!.texture;\r\n\t\t\t\te.time = e.duration;\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\tconst absUrl = this.baseUrl + tile.image!;\r\n\r\n\t\tlet texture = this.spritesheet.textures[tile.image];\r\n\r\n\t\tif (!texture && tryLoad) {\r\n\t\t\ttexture = Texture.from(absUrl, {}, false);\r\n\t\t\tthis._sheet.addTexture(texture, tile.image);\r\n\t\t}\r\n\r\n\t\ttile.texture = texture;\r\n\r\n\t\treturn tile;\r\n\t}\r\n}\r\n","import { Spritesheet, LoaderResource } from 'pixi.js';\r\nimport { TiledContainer } from './TiledContainer';\r\nimport { Config, LayerBuildersMap } from './Config';\r\n\r\nimport { MultiSpritesheet} from './TiledMultiSheet';\r\nimport {  ITiledMap } from './ITiledMap';\r\nimport { TilesetManager } from './TilesetManagers';\r\n\r\n//inject new field in resources\r\ndeclare module 'pixi.js' {\r\n\texport interface LoaderResource {\r\n\t\tstage?: TiledContainer;\r\n\t}\r\n}\r\n\r\nlet showHello: boolean = true;\r\n\r\nexport function CreateStage(\r\n\tres: LoaderResource | Spritesheet | MultiSpritesheet,\r\n\tloader: any,\r\n): TiledContainer | undefined {\r\n\tlet _data: ITiledMap;\r\n\r\n\tif (res instanceof LoaderResource) {\r\n\t\t_data = res.data;\r\n\t} else {\r\n\t\t_data = loader;\r\n\t}\r\n\r\n\t//validate\r\n\tif (!_data || _data.type != 'map') {\r\n\t\t//next();\r\n\t\treturn undefined;\r\n\t}\r\n\r\n\tif (showHello) {\r\n\t\tconsole.log('[TILED] Importer!\\neXponenta {rondo.devil[a]gmail.com}');\r\n\t\tshowHello = false;\r\n\t}\r\n\r\n\tconst useDisplay: boolean = !!Config.usePixiDisplay && (PIXI as any).display !== undefined;\r\n\tconst sheet: MultiSpritesheet | Spritesheet | undefined = res.textures ? (res as any) : undefined;\r\n\tconst stage = new TiledContainer();\r\n\tconst cropName = new RegExp(/^.*[\\\\\\/]/);\r\n\r\n\tstage.layerHeight = _data.height;\r\n\tstage.layerWidth = _data.width;\r\n\tstage.source = _data;\r\n\r\n\tlet baseUrl = '';\r\n\r\n\tif (res instanceof LoaderResource) {\r\n\t\tstage.name = res.url.replace(cropName, '').split('.')[0];\r\n\t\tbaseUrl = res.url.replace(loader.baseUrl, '');\r\n\t\tbaseUrl = baseUrl.match(cropName)![0];\r\n\t}\r\n\r\n\tif (_data.layers) {\r\n\t\tconst setManager = new TilesetManager(_data.tilesets, sheet);\r\n\t\tsetManager.baseUrl = baseUrl;\r\n\r\n\t\tlet zOrder = 0; //_data.layers.length;\r\n\r\n\t\tif (useDisplay) {\r\n\t\t\t_data.layers = _data.layers.reverse();\r\n\t\t}\r\n\r\n\t\tfor (let layer of _data.layers) {\r\n\t\t\tconst builder = LayerBuildersMap[layer.type];\r\n\r\n\t\t\tif (!builder) {\r\n\t\t\t\tconsole.warn(`[TILED] Importer can't support ${layer.type} layer type!`);\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\r\n\t\t\tconst pixiLayer = builder.Build(layer, setManager, zOrder);\r\n\r\n\t\t\tif (!pixiLayer) {\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\r\n\t\t\tzOrder++;\r\n\t\t\tstage.layers = {\r\n\t\t\t\t[layer.name]: pixiLayer,\r\n\t\t\t};\r\n\r\n\t\t\tstage.addChild(pixiLayer);\r\n\t\t}\r\n\t}\r\n\r\n\treturn stage;\r\n}\r\n\r\nexport const Parser = {\r\n\tParse(res: LoaderResource, next: Function) {\r\n\t\t//@ts-ignore\r\n\t\tvar stage = CreateStage(res, this as any);\r\n\t\tres.stage = stage;\r\n\t\tnext();\r\n\t},\r\n\r\n\tuse(res: LoaderResource, next: Function) {\r\n\t\tParser.Parse.call(this, res, next);\r\n\t},\r\n\r\n\tadd() {\r\n\t\tconsole.log('[TILED] middleware registered!');\r\n\t},\r\n};\r\n","import container from \"./ContainerExt\";\r\nimport display from \"./DisplayExt\";\r\nimport emitter from \"./EventEmitterExt\";\r\n \r\nexport function InjectMixins(pixiPackage : any) {\r\n    container(pixiPackage);\r\n    display(pixiPackage);\r\n    emitter(pixiPackage);\r\n}\r\n","import * as PIXI from \"pixi.js\";\r\nimport { IParsedProps } from \"../ITiledMap\";\r\n\r\ndeclare module \"pixi.js\" {\r\n\texport interface Container {\r\n        getChildByPath<T extends PIXI.DisplayObject>(query: string): T | undefined;\r\n\t\taddGlobalChild(...child: PIXI.DisplayObject[]): PIXI.DisplayObject;\r\n\t\tproperties?: IParsedProps;\r\n\t}\r\n}\r\n\r\nexport default function(pack : {Container : any}) {\r\n\t\r\n\tif(!pack.Container)\r\n\t\tthrow new Error(\"Cant't find Container in package!\");\r\n\t\r\n\t/**\r\n\t * @mixes\r\n\t * MIXIN FROM pixiv5-tiled\r\n\t * Get child by path\r\n\t */\r\n\tPIXI.Container.prototype.getChildByPath = function<T extends PIXI.DisplayObject>(path: string) {\r\n\t\tif (!this.children || this.children.length == 0) return undefined;\r\n\r\n\t\tlet result: PIXI.DisplayObject | undefined = this;\r\n\r\n\t\tconst split = path.split(\"/\");\r\n\t\tconst isIndex = new RegExp(\"(?:{{0})-?d+(?=})\");\r\n\r\n\t\tfor (const p of split) {\r\n\t\t\t//@ts-ignore\r\n\t\t\tif (result == undefined || !(result.children)) {\r\n\t\t\t\tresult = undefined;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\r\n\t\t\tif (p.trim().length == 0) continue;\r\n\r\n\t\t\t// find by index\r\n\t\t\t//@ts-ignore\r\n\t\t\tconst ch = result.children;\r\n\t\t\tconst mathes = p.match(isIndex);\r\n\t\t\tif (mathes) {\r\n\t\t\t\tlet index = parseInt(mathes[0]);\r\n\t\t\t\tif (index < 0) {\r\n\t\t\t\t\tindex += ch.length;\r\n\t\t\t\t}\r\n\t\t\t\tif (index >= ch.length) {\r\n\t\t\t\t\tresult = undefined;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tresult = ch[index];\r\n\t\t\t\t}\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\r\n\t\t\t//default by name\r\n\t\t\tresult = (result as PIXI.Container).getChildByName(p);\r\n\t\t}\r\n\r\n\t\treturn result as T;\r\n\t}\r\n\t\r\n\tPIXI.Container.prototype.addGlobalChild = function(...child: PIXI.DisplayObject[]) {\r\n\t\t//TODO: better to convert global position to current matrix\r\n\t\tthis.transform.updateLocalTransform();\r\n\t\tconst loc = new PIXI.Matrix();\r\n\t\tconst invert = this.transform.localTransform.clone().invert();\r\n\t\tfor (let i = 0; i < child.length; i++) {\r\n\r\n\t\t\tconst newChild = child[i];\r\n\t\t\tnewChild.transform.updateLocalTransform();\r\n\t\t\tloc.copyFrom(invert);\r\n\t\t\tloc.append(newChild.localTransform);\r\n\t\t\tchild[i].transform.setFromMatrix(loc);\r\n\t\t}\r\n\r\n\t\treturn this.addChild(...child);\r\n\t}\r\n}\r\n","\r\n\r\ndeclare module \"pixi.js\" {\r\n\texport interface DisplayObject {\r\n\t\treplaceWithTransform(from:DisplayObject): void\r\n\t}\r\n}\r\n\r\nexport default function(pack : {DisplayObject : any}) {\r\n\r\n\tif(!pack.DisplayObject)\r\n\t\tthrow new Error(\"Cant't find DisplayObject in package!\");\r\n\t\r\n\tpack.DisplayObject.prototype.replaceWithTransform = function(from: any) {\r\n        from.updateTransform();\r\n\r\n        if(from.parent){\r\n\t\t\tfrom.parent.addChildAt(this, from.parent.getChildIndex(from));\r\n\t\t}\r\n\r\n\t\tthis.pivot.copyFrom(from.pivot);        \r\n        this.position.copyFrom(from.position);\r\n\t\tthis.scale.copyFrom(from.scale);\r\n\t\tthis.rotation = from.rotation;\r\n\r\n        this.updateTransform();\r\n    }\r\n}","declare module \"pixi.js\" {\r\n\tnamespace utils {\r\n\t\texport interface EventEmitter {\r\n\t\t\tonceAsync(event: string, context? : any): Promise<any>;\r\n\t\t}\r\n\t}\r\n}\r\n\r\nexport default function(pack : {utils : any}) {\r\n\tif(!pack.utils)\r\n\t\tthrow new Error(\"Cant't find utils in package!\");\r\n\r\n    pack.utils.EventEmitter.prototype.onceAsync = function(event: string, context? : any) : Promise<any> {\r\n        return new Promise((res)=>{\r\n            this.once(event, res, context);\r\n        })\r\n    }\r\n}","import { ITiledLayer } from './ITiledMap';\r\nimport { _prepareProperties } from './Utils';\r\nimport { Config } from './Config';\r\nimport { TiledContainer} from './TiledContainer';\r\nimport { TilesetManager } from './TilesetManagers';\r\n\r\nimport  * as ContainerBuilder  from \"./ContainerBuilder\";\r\nexport interface ILayerBuilder {\r\n\tBuild(meta: ITiledLayer, tileset: TilesetManager, ...args: any[]): TiledContainer | undefined;\r\n};\r\n\r\nexport const LayerBuilder = {\r\n\tBuild(layer: ITiledLayer, tileset: TilesetManager, zOrder = 0): TiledContainer | undefined {\r\n\r\n\t\tconst useDisplay: boolean = !!Config.usePixiDisplay && (PIXI as any).display !== undefined;\r\n\t\tconst Layer = useDisplay ? (PIXI as any).display.Layer : {};\r\n\t\tconst Group = useDisplay ? (PIXI as any).display.Group : {};\r\n\r\n\t\t_prepareProperties(layer);\r\n\r\n\t\tconst props = layer.parsedProps;\r\n\r\n\t\tif (props.ignore || props.ignoreLoad) {\r\n\t\t\tconsole.log('[TILED] layer ignored:' + layer.name);\r\n\t\t\treturn undefined;\r\n\t\t}\r\n\r\n\t\tconst layerObject: TiledContainer = useDisplay\r\n\t\t\t? new Layer(new Group(props.zOrder !== undefined ? props.zOrder : zOrder, true))\r\n\t\t\t: new TiledContainer();\r\n\r\n\t\tlayerObject.tiledId = layer.id;\r\n\t\tlayerObject.name = layer.name;\r\n\t\tlayerObject.visible = layer.visible;\r\n\r\n\t\tlayerObject.position.set(layer.x, layer.y);\r\n\t\tlayerObject.alpha = layer.opacity || 1;\r\n\r\n\t\tContainerBuilder.ApplyMeta(layer, layerObject);\r\n\t\treturn layerObject;\r\n\t},\r\n};\r\n","import { ITiledLayer, ITiledImageLayer, ITiledObjectLayer, ITiledSprite, ITiledObject } from './ITiledMap';\r\nimport { TiledContainer } from './TiledContainer';\r\nimport { LayerBuilder, ILayerBuilder } from './LayerBuilder';\r\nimport { TilesetManager } from './TilesetManagers';\r\nimport { _prepareProperties, Objectype, TiledObjectType } from './Utils';\r\n\r\nimport * as SB from './SpriteBuilder';\r\nimport * as TB from './TextBuilder';\r\nimport * as CB from './ContainerBuilder';\r\n\r\nimport { TiledSprite } from './TiledSprite';\r\n\r\nexport const ObjectLayerBuilder = {\r\n\t__gen: <Record<TiledObjectType, (...args: any[])=> TiledContainer | TiledContainer>>{\r\n\t\t[TiledObjectType.IMAGE](meta: ITiledObject, tileset: TilesetManager) {\r\n\t\t\tconst smeta = meta as ITiledSprite;\r\n\t\t\tconst frame = smeta.image ? tileset.getTileByTile(smeta.image!) : tileset.getTileByGid(smeta.gid);\r\n\r\n\t\t\tsmeta.image = frame;\r\n\t\t\tconst sprite = SB.Build(smeta) as TiledSprite;\r\n\r\n\t\t\tif (frame && frame.texture) {\r\n\t\t\t\tsprite.texture = frame.texture;\r\n\t\t\t\tsprite.tileFrame = frame;\r\n\r\n\t\t\t\tif (smeta.fromImageLayer) {\r\n\t\t\t\t\tframe.texture.baseTexture.once('update', () => {\r\n\t\t\t\t\t\tsprite.scale.set(1);\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif(smeta.fromImageLayer) {\r\n\t\t\t\tsprite.anchor.set(0,0);\r\n\t\t\t}\r\n\r\n\t\t\treturn (sprite as any) as TiledContainer;\r\n\t\t},\r\n\t\t[TiledObjectType.TEXT](meta: ITiledObject, tileset: TilesetManager) {\r\n\t\t\treturn TB.Build(meta);\r\n\t\t},\r\n\t\t[TiledObjectType.DEFAULT](meta: ITiledObject, tileset: TilesetManager) {\r\n\t\t\treturn CB.Build(meta);\r\n\t\t},\r\n\t},\r\n\r\n\tBuild(layer: ITiledLayer, tileset: TilesetManager, zOrder = 0): TiledContainer | undefined {\r\n\t\tconst objLayer = layer as ITiledObjectLayer;\r\n\t\tconst layerContatiner = LayerBuilder.Build(layer, tileset, zOrder);\r\n\r\n\t\tif (!layerContatiner) {\r\n\t\t\treturn undefined;\r\n\t\t}\r\n\r\n\t\tif (layer.type === 'imagelayer') {\r\n\t\t\tif (!this.__convertLayer(layer as ITiledImageLayer)) {\r\n\t\t\t\treturn undefined;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (!objLayer.objects || !objLayer.objects.length) {\r\n\t\t\treturn layerContatiner;\r\n\t\t}\r\n\r\n\t\tconst objects = objLayer.objects;\r\n\r\n\t\tlet localZIndex = 0;\r\n\r\n\t\tfor (let objMeta of objects) {\r\n\t\t\t_prepareProperties(objMeta);\r\n\r\n\t\t\tconst type = Objectype(objMeta);\r\n\t\t\tconst method = this.__gen[type] || this.__gen[TiledObjectType.DEFAULT];\r\n\t\t\tconst obj = method!.call(this, objMeta, tileset);\r\n\r\n\t\t\tif (!obj) {\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\r\n\t\t\t/*\r\n\t\t\tif (Config.usePixiDisplay) {\r\n\t\t\t\t(obj as any).parentGroup = (layerContatiner as any).group;\r\n\t\t\t\tstage.addChildAt(pixiObject, localZIndex);\r\n\t\t\t} else {\r\n\t\t\t\t*/\r\n\r\n\t\t\tlayerContatiner.addChildAt(obj, localZIndex);\r\n\t\t\t//}\r\n\r\n\t\t\tlocalZIndex++;\r\n\t\t}\r\n\r\n\t\treturn layerContatiner;\r\n\t},\r\n\r\n\t__convertLayer(imageLayer: ITiledImageLayer) {\r\n\t\tif (!imageLayer.image) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\t(imageLayer as any).objects = [\r\n\t\t\t{\r\n\t\t\t\timage: {\r\n\t\t\t\t\timage: imageLayer.image,\r\n\t\t\t\t},\r\n\t\t\t\t//imageLayer can't has gid ID\r\n\r\n\t\t\t\tgid: -1,\r\n\t\t\t\tname: imageLayer.name,\r\n\t\t\t\tx: imageLayer.x + imageLayer.offsetx,\r\n\t\t\t\ty: imageLayer.y + imageLayer.offsety,\r\n\r\n\t\t\t\tfromImageLayer: true,\r\n\t\t\t\tproperties: imageLayer.properties,\r\n\t\t\t\tparsedProps: imageLayer.parsedProps,\r\n\t\t\t} as ITiledSprite,\r\n\t\t];\r\n\r\n\t\treturn true;\r\n\t},\r\n};\r\n","declare global {\r\n\tinterface Window {\r\n\t\tPIXI: any;\r\n\t}\r\n}\r\n\r\nconst VERSION = '__VERSION__';\r\n\r\nimport * as ContainerBuilder from './ContainerBuilder';\r\nimport * as SpriteBuilder from './SpriteBuilder';\r\nimport * as TextBuilder from './TextBuilder';\r\n\r\nimport { Parser, CreateStage } from './TiledObjectParser';\r\nimport { Config, ITiledProps, LayerBuildersMap } from './Config';\r\nimport { TiledContainer } from './TiledContainer';\r\nimport { InjectMixins } from './pixi-utils';\r\n\r\n// prevent circular\r\nObject.assign(LayerBuildersMap, {\r\n\ttilelayer: undefined,\r\n\tobjectgroup: ObjectLayerBuilder,\r\n\timagelayer: ObjectLayerBuilder,\r\n\tgroup: undefined,\r\n});\r\n\r\nexport function Inject(pixiPack = window.PIXI, props: ITiledProps | undefined = undefined) {\r\n\tif (!pixiPack) {\r\n\t\tconsole.warn(\r\n\t\t\t\"Auto injection works only with globals scoped PIXI, not in modules\\nuse 'Loader.registerPlugin(Parser)' otherwith\",\r\n\t\t);\r\n\t\treturn;\r\n\t}\r\n\r\n\tif (props) {\r\n\t\tObject.assign(Config, props);\r\n\t}\r\n\r\n\tInjectMixins(pixiPack);\r\n\r\n\tif (Config.injectMiddleware) {\r\n\t\tpixiPack.Loader.registerPlugin(Parser);\r\n\t}\r\n}\r\n\r\nimport * as Primitives from './TiledPrimitives';\r\nimport { MultiSpritesheet } from './TiledMultiSheet';\r\nimport { ObjectLayerBuilder } from './ObjectsLayerBuilder';\r\nexport { Primitives };\r\nexport { Parser };\r\nexport { CreateStage };\r\nexport { Config };\r\nexport { ContainerBuilder };\r\nexport { SpriteBuilder };\r\nexport { TextBuilder };\r\nexport { TiledContainer };\r\nexport { MultiSpritesheet };\r\nexport { VERSION };\r\n"],"names":["TiledContainer","Container","[object Object]","this","Config","defSpriteAnchor","Point","debugContainers","usePixiDisplay","roundFontAlpha","injectMiddleware","LayerBuildersMap","HexStringToHexInt","value","length","substr","parseInt","e","console","warn","message","TiledObjectType","Objectype","meta","properties","container","DEFAULT","gid","image","IMAGE","undefined","text","TEXT","point","POINT","polygon","POLYGON","polyline","POLYLINE","ellipse","ELLIPSE","_prepareProperties","layer","props","Array","p","val","type","name","spriteObject","vFlip","hFlip","dFlip","realGid","parsedProps","TiledRect","Rectangle","TiledPoint","x","y","super","TiledPolygon","Polygon","points","sX","delta","_x","xIndex","sY","_y","yIndex","rect","maxX","maxY","index","px","py","width","height","getBounds","h","factor","w","TiledPolypine","slice","TiledEllipse","Ellipse","hw","hh","BuildPrimitive","prim","Utils.Objectype","Utils.TiledObjectType","poses","map","types","split","visible","TiledSprite","Sprite","ApplyMeta","target","tiledId","id","rotation","Math","PI","primitive","Primitives.BuildPrimitive","isNaN","opacity","alpha","Number","Object","assign","source","setTimeout","Graphics","lineStyle","drawRect","endFill","parent","addChild","Build","indexOf","Texture","WHITE","anchor","pivot","hitArea","sprite","animation","AnimatedSprite","autoUpdate","a","play","loop","animLoop","texture","EMPTY","fromImageLayer","ContainerBuilder.ApplyMeta","obj","objectgroup","objects","scale","pixiText","Text","wordWrap","wrap","wordWrapWidth","fill","Utils.HexStringToHexInt","color","align","valign","fontFamily","fontfamily","fontWeight","bold","fontStyle","italic","fontSize","pixelsize","roundPixels","set","halign","position","style","stroke","strokeColor","strokeThickness","padding","fontPadding","MultiSpritesheet","sheets","forEach","element","add","sheet","push","tex","images","textures","spr","animations","TilesetManager","_tileSets","register","spritesheet","_sheet","tryLoad","loadUnknowImages","tile","tilesets","baseUrl","tileSet","tilesetId","i","firstgid","error","find","tiles","filter","img","resolveImageUrl","getTileByTile","skipAnim","ts","tileid","time","duration","absUrl","from","addTexture","showHello","CreateStage","res","loader","_data","LoaderResource","data","log","useDisplay","PIXI","display","stage","cropName","RegExp","layerHeight","layerWidth","url","replace","match","layers","setManager","zOrder","reverse","builder","pixiLayer","Parser","next","Parse","call","InjectMixins","pixiPackage","pack","Error","PIXI.Container","prototype","getChildByPath","path","children","result","isIndex","trim","ch","mathes","getChildByName","addGlobalChild","child","transform","updateLocalTransform","loc","PIXI.Matrix","invert","localTransform","clone","newChild","copyFrom","append","setFromMatrix","DisplayObject","replaceWithTransform","updateTransform","addChildAt","getChildIndex","utils","EventEmitter","onceAsync","event","context","Promise","once","emitter","LayerBuilder","tileset","Layer","Group","ignore","ignoreLoad","layerObject","ObjectLayerBuilder","__gen","smeta","frame","getTileByGid","SB.Build","tileFrame","baseTexture","TB.Build","CB.Build","objLayer","layerContatiner","__convertLayer","localZIndex","objMeta","imageLayer","offsetx","offsety","tilelayer","imagelayer","group","pixiPack","window","Loader","registerPlugin"],"mappings":"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"}